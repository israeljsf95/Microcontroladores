;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 20/11/2019 21:15:18
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x00000004021E  	GOTO	_main
0x0004	0x000000  	0
0x0006	0x000000  	0
0x0008	0x000000  	0
0x000A	0x000000  	0
0x000C	0x000000  	0
0x000E	0x000000  	0
0x0010	0x000000  	0
0x0012	0x000000  	0
0x0014	0x000000  	0
0x0016	0x000000  	0
0x0018	0x000000  	0
0x001A	0x000000  	0
0x001C	0x000000  	0
0x001E	0x000000  	0
0x0020	0x000000  	0
0x0022	0x000000  	0
0x0024	0x000000  	0
0x0026	0x000000  	0
0x0028	0x000000  	0
0x002A	0x000000  	0
0x002C	0x000000  	0
0x002E	0x000000  	0
0x0030	0x000000  	0
0x0032	0x000000  	0
0x0034	0x000000  	0
0x0036	0x000000  	0
0x0038	0x000000  	0
0x003A	0x000000  	0
0x003C	0x000000  	0
0x003E	0x000000  	0
0x0040	0x000000  	0
0x0042	0x000000  	0
0x0044	0x000000  	0
0x0046	0x000000  	0
0x0048	0x000000  	0
0x004A	0x000000  	0
0x004C	0x000000  	0
0x004E	0x000000  	0
0x0050	0x000000  	0
0x0052	0x000000  	0
0x0054	0x000000  	0
0x0056	0x000000  	0
0x0058	0x000000  	0
0x005A	0x000000  	0
0x005C	0x000000  	0
0x005E	0x000000  	0
0x0060	0x000000  	0
0x0062	0x000000  	0
0x0064	0x000000  	0
0x0066	0x000000  	0
0x0068	0x000000  	0
0x006A	0x000000  	0
0x006C	0x000000  	0
0x006E	0x000000  	0
0x0070	0x000000  	0
0x0072	0x000000  	0
0x0074	0x000000  	0
0x0076	0x000000  	0
0x0078	0x000000  	0
0x007A	0x000000  	0
0x007C	0x000000  	0
0x007E	0x000000  	0
0x0080	0x000000  	0
0x0082	0x000000  	0
0x0084	0x000000  	0
0x0086	0x000000  	0
0x0088	0x000000  	0
0x008A	0x000000  	0
0x008C	0x000000  	0
0x008E	0x000000  	0
0x0090	0x000000  	0
0x0092	0x000000  	0
0x0094	0x000000  	0
0x0096	0x000000  	0
0x0098	0x000000  	0
0x009A	0x000000  	0
0x009C	0x000000  	0
0x009E	0x000000  	0
0x00A0	0x000000  	0
0x00A2	0x000000  	0
0x00A4	0x000000  	0
0x00A6	0x000000  	0
0x00A8	0x000000  	0
0x00AA	0x000000  	0
0x00AC	0x000000  	0
0x00AE	0x000000  	0
0x00B0	0x000000  	0
0x00B2	0x000000  	0
0x00B4	0x000000  	0
0x00B6	0x000000  	0
0x00B8	0x000000  	0
0x00BA	0x000000  	0
0x00BC	0x000000  	0
0x00BE	0x000000  	0
0x00C0	0x000000  	0
0x00C2	0x000000  	0
0x00C4	0x000000  	0
0x00C6	0x000000  	0
0x00C8	0x000000  	0
0x00CA	0x000000  	0
0x00CC	0x000000  	0
0x00CE	0x000000  	0
0x00D0	0x000000  	0
0x00D2	0x000000  	0
0x00D4	0x000000  	0
0x00D6	0x000000  	0
0x00D8	0x000000  	0
0x00DA	0x000000  	0
0x00DC	0x000000  	0
0x00DE	0x000000  	0
0x00E0	0x000000  	0
0x00E2	0x000000  	0
0x00E4	0x000000  	0
0x00E6	0x000000  	0
0x00E8	0x000000  	0
0x00EA	0x000000  	0
0x00EC	0x000000  	0
0x00EE	0x000000  	0
0x00F0	0x000000  	0
0x00F2	0x000000  	0
0x00F4	0x000000  	0
0x00F6	0x000000  	0
0x00F8	0x000000  	0
0x00FA	0x000000  	0
0x00FC	0x000000  	0
0x00FE	0x000000  	0
_main:
0x021E	0x20802F  	MOV	#2050, W15
0x0220	0x20FFF0  	MOV	#4095, W0
0x0222	0xB7A020  	MOV	WREG, SPLIM
0x0224	0x200000  	MOV	#0, W0
0x0226	0xB7A034  	MOV	WREG, PSVPAG
0x0228	0x200040  	MOV	#4, W0
0x022A	0xB72044  	IOR	CORCON
0x022C	0x000000020242  	CALL	578
;criat_q2.c,29 :: 		void main() {
;criat_q2.c,30 :: 		ADPCFG = 0xFFFF;
0x0230	0x2FFFF0  	MOV	#65535, W0
0x0232	0xB7A2A8  	MOV	WREG, ADPCFG
;criat_q2.c,31 :: 		TRISB = 0;
0x0234	0xEF22C6  	CLR	TRISB
;criat_q2.c,32 :: 		TRISD = 0;
0x0236	0xEF22D2  	CLR	TRISD
;criat_q2.c,33 :: 		TRISE = 0;
0x0238	0xEF22D8  	CLR	TRISE
;criat_q2.c,34 :: 		TRISF = 0;
0x023A	0xEF22DE  	CLR	TRISF
;criat_q2.c,35 :: 		while(1){
L_main0:
;criat_q2.c,36 :: 		marcha_imp();
0x023C	0x07FFD5  	RCALL	_marcha_imp
;criat_q2.c,37 :: 		}
0x023E	0x37FFFE  	BRA	L_main0
;criat_q2.c,38 :: 		}
L_end_main:
L__main_end_loop:
0x0240	0x37FFFF  	BRA	L__main_end_loop
; end of _main
_marcha_imp:
;criat_q2.c,62 :: 		void marcha_imp(){
;criat_q2.c,63 :: 		tocar(a, 100);
0x01E8	0x781F8A  	PUSH	W10
0x01EA	0x781F8B  	PUSH	W11
0x01EC	0x781F8C  	PUSH	W12
0x01EE	0x20064B  	MOV	#100, W11
0x01F0	0x20000C  	MOV	#0, W12
0x01F2	0x201B8A  	MOV	#440, W10
0x01F4	0x07FFB7  	RCALL	_tocar
;criat_q2.c,64 :: 		tocar(a, 100);
0x01F6	0x20064B  	MOV	#100, W11
0x01F8	0x20000C  	MOV	#0, W12
0x01FA	0x201B8A  	MOV	#440, W10
0x01FC	0x07FFB3  	RCALL	_tocar
;criat_q2.c,65 :: 		tocar(a, 100);
0x01FE	0x20064B  	MOV	#100, W11
0x0200	0x20000C  	MOV	#0, W12
0x0202	0x201B8A  	MOV	#440, W10
0x0204	0x07FFAF  	RCALL	_tocar
;criat_q2.c,66 :: 		tocar(f, 100);
0x0206	0x20064B  	MOV	#100, W11
0x0208	0x20000C  	MOV	#0, W12
0x020A	0x2015DA  	MOV	#349, W10
0x020C	0x07FFAB  	RCALL	_tocar
;criat_q2.c,67 :: 		tocar(cH, 100);
0x020E	0x20064B  	MOV	#100, W11
0x0210	0x20000C  	MOV	#0, W12
0x0212	0x2020BA  	MOV	#523, W10
0x0214	0x07FFA7  	RCALL	_tocar
;criat_q2.c,79 :: 		}
L_end_marcha_imp:
0x0216	0x78064F  	POP	W12
0x0218	0x7805CF  	POP	W11
0x021A	0x78054F  	POP	W10
0x021C	0x060000  	RETURN
; end of _marcha_imp
_tocar:
;criat_q2.c,43 :: 		void tocar(int freq, long tempo_ms){
;criat_q2.c,45 :: 		long atraso = (long)(1000000/freq);
0x0164	0x781F8B  	PUSH	W11
0x0166	0x781F8C  	PUSH	W12
0x0168	0x78010A  	MOV	W10, W2
0x016A	0xDE91CF  	ASR	W2, #15, W3
0x016C	0x242400  	MOV	#16960, W0
0x016E	0x2000F1  	MOV	#15, W1
0x0170	0xEB8200  	SETM	W4
0x0172	0x07FFC6  	RCALL	__Divide_32x32
0x0174	0x78064F  	POP	W12
0x0176	0x7805CF  	POP	W11
; atraso start address is: 8 (W4)
0x0178	0xBE0200  	MOV.D	W0, W4
;criat_q2.c,46 :: 		long loop = (long)((tempo_ms*1000)/(atraso*2));
0x017A	0xBE9F84  	PUSH.D	W4
0x017C	0x78000B  	MOV	W11, W0
0x017E	0x78008C  	MOV	W12, W1
0x0180	0x203E82  	MOV	#1000, W2
0x0182	0x200003  	MOV	#0, W3
0x0184	0x07FFE6  	RCALL	__Multiply_32x32
0x0186	0xBE024F  	POP.D	W4
0x0188	0xD00104  	SL	W4, W2
0x018A	0xD28185  	RLC	W5, W3
0x018C	0xBE9F84  	PUSH.D	W4
0x018E	0xEB8200  	SETM	W4
0x0190	0x07FFB7  	RCALL	__Divide_32x32
0x0192	0xBE024F  	POP.D	W4
; loop start address is: 4 (W2)
0x0194	0xBE0100  	MOV.D	W0, W2
;criat_q2.c,47 :: 		for (x = 0; x < loop; x++){
0x0196	0xEF2000  	CLR	W0
0x0198	0x884000  	MOV	W0, _x
; loop end address is: 4 (W2)
; atraso end address is: 8 (W4)
L_tocar2:
; loop start address is: 4 (W2)
; atraso start address is: 8 (W4)
0x019A	0x804000  	MOV	_x, W0
0x019C	0xDE80CF  	ASR	W0, #15, W1
0x019E	0xE10002  	CP	W0, W2
0x01A0	0xE18803  	CPB	W1, W3
0x01A2	0x3D001B  	BRA GE	L_tocar3
L__tocar18:
;criat_q2.c,48 :: 		PORTE = 0x01;
0x01A4	0x200010  	MOV	#1, W0
0x01A6	0xB7A2DA  	MOV	WREG, PORTE
; loop end address is: 4 (W2)
; atraso end address is: 8 (W4)
;criat_q2.c,49 :: 		while(atraso > 0){
L_tocar5:
; atraso start address is: 8 (W4)
; loop start address is: 4 (W2)
0x01A8	0xE12060  	CP	W4, #0
0x01AA	0xE1A860  	CPB	W5, #0
0x01AC	0x340007  	BRA LE	L_tocar6
L__tocar19:
;criat_q2.c,50 :: 		Delay_ms(1);
0x01AE	0x214D57  	MOV	#5333, W7
L_tocar7:
0x01B0	0xED200E  	DEC	W7
0x01B2	0x3AFFFE  	BRA NZ	L_tocar7
0x01B4	0x000000  	NOP
;criat_q2.c,51 :: 		atraso--;
0x01B6	0x520261  	SUB	W4, #1, W4
0x01B8	0x5A82E0  	SUBB	W5, #0, W5
;criat_q2.c,52 :: 		}
0x01BA	0x37FFF6  	BRA	L_tocar5
L_tocar6:
;criat_q2.c,53 :: 		PORTE = 0x00;
0x01BC	0xEF22DA  	CLR	PORTE
; loop end address is: 4 (W2)
; atraso end address is: 8 (W4)
;criat_q2.c,54 :: 		while(atraso > 0){
L_tocar9:
; loop start address is: 4 (W2)
; atraso start address is: 8 (W4)
0x01BE	0xE12060  	CP	W4, #0
0x01C0	0xE1A860  	CPB	W5, #0
0x01C2	0x340007  	BRA LE	L_tocar10
L__tocar20:
;criat_q2.c,55 :: 		Delay_ms(1);
0x01C4	0x214D57  	MOV	#5333, W7
L_tocar11:
0x01C6	0xED200E  	DEC	W7
0x01C8	0x3AFFFE  	BRA NZ	L_tocar11
0x01CA	0x000000  	NOP
;criat_q2.c,56 :: 		atraso--;
0x01CC	0x520261  	SUB	W4, #1, W4
0x01CE	0x5A82E0  	SUBB	W5, #0, W5
;criat_q2.c,57 :: 		}
0x01D0	0x37FFF6  	BRA	L_tocar9
L_tocar10:
;criat_q2.c,47 :: 		for (x = 0; x < loop; x++){
0x01D2	0x200011  	MOV	#1, W1
0x01D4	0x208000  	MOV	#lo_addr(_x), W0
0x01D6	0x408810  	ADD	W1, [W0], [W0]
;criat_q2.c,58 :: 		}
; loop end address is: 4 (W2)
; atraso end address is: 8 (W4)
0x01D8	0x37FFE0  	BRA	L_tocar2
L_tocar3:
;criat_q2.c,59 :: 		Delay_ms(50);
0x01DA	0x200058  	MOV	#5, W8
0x01DC	0x211AB7  	MOV	#4523, W7
L_tocar13:
0x01DE	0xED200E  	DEC	W7
0x01E0	0x3AFFFE  	BRA NZ	L_tocar13
0x01E2	0xED2010  	DEC	W8
0x01E4	0x3AFFFC  	BRA NZ	L_tocar13
;criat_q2.c,60 :: 		}
L_end_tocar:
0x01E6	0x060000  	RETURN
; end of _tocar
__Divide_32x32:
0x0100	0xFA0000  	LNK	#0
;__Lib_Math.c,78 :: 		
;__Lib_Math.c,81 :: 		
0x0102	0x070002  	RCALL	Divide_32x32___testsus
;__Lib_Math.c,83 :: 		
0x0104	0x00000004014E  	GOTO	the_end_Divide_32x32
;__Lib_Math.c,88 :: 		
Divide_32x32___testsus:
;__Lib_Math.c,89 :: 		
0x0108	0xE20008  	CP0	W4
;__Lib_Math.c,90 :: 		
0x010A	0x3A0002  	BRA NZ	Divide_32x32___divsi3
;__Lib_Math.c,92 :: 		
0x010C	0x070010  	RCALL	Divide_32x32___udivsi3
;__Lib_Math.c,93 :: 		
0x010E	0x060000  	RETURN
;__Lib_Math.c,95 :: 		
Divide_32x32___divsi3:
;__Lib_Math.c,96 :: 		
0x0110	0x689F83  	XOR	W1, W3, [W15++]
;__Lib_Math.c,97 :: 		
0x0112	0xE20002  	CP0	W1
;__Lib_Math.c,98 :: 		
0x0114	0x3D0002  	BRA GE	Divide_32x32_divtestb
;__Lib_Math.c,99 :: 		
0x0116	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,100 :: 		
0x0118	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,101 :: 		
Divide_32x32_divtestb:
;__Lib_Math.c,102 :: 		
0x011A	0xE20006  	CP0	W3
;__Lib_Math.c,103 :: 		
0x011C	0x3D0002  	BRA GE	Divide_32x32_calcquot
;__Lib_Math.c,104 :: 		
0x011E	0x110160  	SUBR	W2, #0, W2
;__Lib_Math.c,105 :: 		
0x0120	0x1981E0  	SUBBR	W3, #0, W3
;__Lib_Math.c,106 :: 		
Divide_32x32_calcquot:
;__Lib_Math.c,107 :: 		
0x0122	0x070005  	RCALL	Divide_32x32___udivsi3
;__Lib_Math.c,108 :: 		
0x0124	0xE0004F  	CP0	[--W15]
;__Lib_Math.c,109 :: 		
0x0126	0x3B0002  	BRA NN	Divide_32x32_returnq
;__Lib_Math.c,110 :: 		
0x0128	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,111 :: 		
0x012A	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,112 :: 		
Divide_32x32_returnq:
;__Lib_Math.c,113 :: 		
0x012C	0x060000  	RETURN
;__Lib_Math.c,114 :: 		
Divide_32x32___udivsi3:
;__Lib_Math.c,115 :: 		
0x012E	0xB82260  	MUL.UU	W4, #0, W4
;__Lib_Math.c,116 :: 		
0x0130	0x200206  	MOV	#32, W6
;__Lib_Math.c,117 :: 		
Divide_32x32_nextbit:
;__Lib_Math.c,118 :: 		
0x0132	0xD00000  	SL	W0, W0
;__Lib_Math.c,119 :: 		
0x0134	0xD28081  	RLC	W1, W1
;__Lib_Math.c,120 :: 		
0x0136	0xD28204  	RLC	W4, W4
;__Lib_Math.c,121 :: 		
0x0138	0xD28285  	RLC	W5, W5
;__Lib_Math.c,122 :: 		
0x013A	0xA80000  	BSET	W0, #0
;__Lib_Math.c,123 :: 		
0x013C	0x520202  	SUB	W4, W2, W4
;__Lib_Math.c,124 :: 		
0x013E	0x5A8283  	SUBB	W5, W3, W5
;__Lib_Math.c,125 :: 		
0x0140	0x3B0003  	BRA NN	Divide_32x32_iterate
;__Lib_Math.c,126 :: 		
0x0142	0x420202  	ADD	W4, W2, W4
;__Lib_Math.c,127 :: 		
0x0144	0x4A8283  	ADDC	W5, W3, W5
;__Lib_Math.c,128 :: 		
0x0146	0xA10000  	BCLR	W0, #0
;__Lib_Math.c,129 :: 		
Divide_32x32_iterate:
;__Lib_Math.c,130 :: 		
0x0148	0xE90306  	DEC	W6, W6
;__Lib_Math.c,131 :: 		
0x014A	0x3AFFF3  	BRA NZ	Divide_32x32_nextbit
;__Lib_Math.c,132 :: 		
0x014C	0x060000  	RETURN
;__Lib_Math.c,135 :: 		
the_end_Divide_32x32:
;__Lib_Math.c,138 :: 		
L_end__Divide_32x32:
0x014E	0xFA8000  	ULNK
0x0150	0x060000  	RETURN
; end of __Divide_32x32
__Multiply_32x32:
0x0152	0xFA0000  	LNK	#0
;__Lib_Math.c,43 :: 		
;__Lib_Math.c,46 :: 		
0x0154	0xB80A02  	MUL.UU	W1, W2, W4
;__Lib_Math.c,47 :: 		
0x0156	0x880050  	MOV	W0, W5
;__Lib_Math.c,48 :: 		
0x0158	0xB80002  	MUL.UU	W0, W2, W0
;__Lib_Math.c,49 :: 		
0x015A	0x420081  	ADD	W4, W1, W1
;__Lib_Math.c,50 :: 		
0x015C	0xB82A03  	MUL.UU	W5, W3, W4
;__Lib_Math.c,51 :: 		
0x015E	0x420081  	ADD	W4, W1, W1
;__Lib_Math.c,54 :: 		
L_end__Multiply_32x32:
0x0160	0xFA8000  	ULNK
0x0162	0x060000  	RETURN
; end of __Multiply_32x32
0x0242	0x20800A  	MOV	#2048, W10
0x0244	0x20000B  	MOV	#0, W11
0x0246	0x090000  	REPEAT	#0
0x0248	0x781D0B  	MOV	W11, [W10++]
0x024A	0x060000  	RETURN
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0100      [82]    __Divide_32x32
0x0152      [18]    __Multiply_32x32
0x0164     [132]    _tocar
0x01E8      [54]    _marcha_imp
0x021E      [36]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x02D2       [2]    TRISD
0x02D8       [2]    TRISE
0x02DE       [2]    TRISF
0x02C6       [2]    TRISB
0x0800       [2]    _x
0x02DA       [2]    PORTE
0x02A8       [2]    ADPCFG
0x0014       [2]    FARG_tocar_freq
0x0016       [4]    FARG_tocar_tempo_ms
0x02A8       [2]    ADPCFG
0x02C6       [2]    TRISB
0x02D2       [2]    TRISD
0x02D8       [2]    TRISE
0x02DA       [2]    PORTE
0x02DE       [2]    TRISF
