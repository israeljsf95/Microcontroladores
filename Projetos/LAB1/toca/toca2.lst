;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 20/11/2019 22:12:26
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x000000040100  	GOTO	_main
0x0004	0x000000  	0
0x0006	0x000000  	0
0x0008	0x000000  	0
0x000A	0x000000  	0
0x000C	0x000000  	0
0x000E	0x000000  	0
0x0010	0x000000  	0
0x0012	0x000000  	0
0x0014	0x000000  	0
0x0016	0x000000  	0
0x0018	0x000000  	0
0x001A	0x000000  	0
0x001C	0x000000  	0
0x001E	0x000000  	0
0x0020	0x000000  	0
0x0022	0x000000  	0
0x0024	0x000000  	0
0x0026	0x000000  	0
0x0028	0x000000  	0
0x002A	0x000000  	0
0x002C	0x000000  	0
0x002E	0x000000  	0
0x0030	0x000000  	0
0x0032	0x000000  	0
0x0034	0x000000  	0
0x0036	0x000000  	0
0x0038	0x000000  	0
0x003A	0x000000  	0
0x003C	0x000000  	0
0x003E	0x000000  	0
0x0040	0x000000  	0
0x0042	0x000000  	0
0x0044	0x000000  	0
0x0046	0x000000  	0
0x0048	0x000000  	0
0x004A	0x000000  	0
0x004C	0x000000  	0
0x004E	0x000000  	0
0x0050	0x000000  	0
0x0052	0x000000  	0
0x0054	0x000000  	0
0x0056	0x000000  	0
0x0058	0x000000  	0
0x005A	0x000000  	0
0x005C	0x000000  	0
0x005E	0x000000  	0
0x0060	0x000000  	0
0x0062	0x000000  	0
0x0064	0x000000  	0
0x0066	0x000000  	0
0x0068	0x000000  	0
0x006A	0x000000  	0
0x006C	0x000000  	0
0x006E	0x000000  	0
0x0070	0x000000  	0
0x0072	0x000000  	0
0x0074	0x000000  	0
0x0076	0x000000  	0
0x0078	0x000000  	0
0x007A	0x000000  	0
0x007C	0x000000  	0
0x007E	0x000000  	0
0x0080	0x000000  	0
0x0082	0x000000  	0
0x0084	0x000000  	0
0x0086	0x000000  	0
0x0088	0x000000  	0
0x008A	0x000000  	0
0x008C	0x000000  	0
0x008E	0x000000  	0
0x0090	0x000000  	0
0x0092	0x000000  	0
0x0094	0x000000  	0
0x0096	0x000000  	0
0x0098	0x000000  	0
0x009A	0x000000  	0
0x009C	0x000000  	0
0x009E	0x000000  	0
0x00A0	0x000000  	0
0x00A2	0x000000  	0
0x00A4	0x000000  	0
0x00A6	0x000000  	0
0x00A8	0x000000  	0
0x00AA	0x000000  	0
0x00AC	0x000000  	0
0x00AE	0x000000  	0
0x00B0	0x000000  	0
0x00B2	0x000000  	0
0x00B4	0x000000  	0
0x00B6	0x000000  	0
0x00B8	0x000000  	0
0x00BA	0x000000  	0
0x00BC	0x000000  	0
0x00BE	0x000000  	0
0x00C0	0x000000  	0
0x00C2	0x000000  	0
0x00C4	0x000000  	0
0x00C6	0x000000  	0
0x00C8	0x000000  	0
0x00CA	0x000000  	0
0x00CC	0x000000  	0
0x00CE	0x000000  	0
0x00D0	0x000000  	0
0x00D2	0x000000  	0
0x00D4	0x000000  	0
0x00D6	0x000000  	0
0x00D8	0x000000  	0
0x00DA	0x000000  	0
0x00DC	0x000000  	0
0x00DE	0x000000  	0
0x00E0	0x000000  	0
0x00E2	0x000000  	0
0x00E4	0x000000  	0
0x00E6	0x000000  	0
0x00E8	0x000000  	0
0x00EA	0x000000  	0
0x00EC	0x000000  	0
0x00EE	0x000000  	0
0x00F0	0x000000  	0
0x00F2	0x000000  	0
0x00F4	0x000000  	0
0x00F6	0x000000  	0
0x00F8	0x000000  	0
0x00FA	0x000000  	0
0x00FC	0x000000  	0
0x00FE	0x000000  	0
_main:
0x0100	0x20836F  	MOV	#2102, W15
0x0102	0x20FFF0  	MOV	#4095, W0
0x0104	0xB7A020  	MOV	WREG, SPLIM
0x0106	0x200000  	MOV	#0, W0
0x0108	0xB7A034  	MOV	WREG, PSVPAG
0x010A	0x200040  	MOV	#4, W0
0x010C	0xB72044  	IOR	CORCON
0x010E	0x0000000201BC  	CALL	444
0x0112	0x0000000201C6  	CALL	454
;toca2.c,12 :: 		void main() {
;toca2.c,13 :: 		ADPCFG=0xFFFF;
0x0116	0x2FFFF0  	MOV	#65535, W0
0x0118	0xB7A2A8  	MOV	WREG, ADPCFG
;toca2.c,14 :: 		TRISE=0;
0x011A	0xEF22D8  	CLR	TRISE
;toca2.c,16 :: 		while(1){
L_main0:
;toca2.c,19 :: 		LATE=mux[k];
0x011C	0x2082C1  	MOV	#lo_addr(_mux), W1
0x011E	0x208300  	MOV	#lo_addr(_k), W0
0x0120	0x408010  	ADD	W1, [W0], W0
0x0122	0x784010  	MOV.B	[W0], W0
0x0124	0xFB8000  	ZE	W0, W0
0x0126	0xB7A2DC  	MOV	WREG, LATE
;toca2.c,20 :: 		Delay_ms(30);
0x0128	0x200038  	MOV	#3, W8
0x012A	0x270FF7  	MOV	#28927, W7
L_main2:
0x012C	0xED200E  	DEC	W7
0x012E	0x3AFFFE  	BRA NZ	L_main2
0x0130	0xED2010  	DEC	W8
0x0132	0x3AFFFC  	BRA NZ	L_main2
0x0134	0x000000  	NOP
0x0136	0x000000  	NOP
;toca2.c,21 :: 		LATE=0xFE;
0x0138	0x200FE0  	MOV	#254, W0
0x013A	0xB7A2DC  	MOV	WREG, LATE
;toca2.c,23 :: 		if (k<4){
0x013C	0x804180  	MOV	_k, W0
0x013E	0xE10064  	CP	W0, #4
0x0140	0x3D0004  	BRA GE	L_main4
L__main14:
;toca2.c,24 :: 		k++;
0x0142	0x200011  	MOV	#1, W1
0x0144	0x208300  	MOV	#lo_addr(_k), W0
0x0146	0x408810  	ADD	W1, [W0], [W0]
;toca2.c,25 :: 		}else{
0x0148	0x370002  	BRA	L_main5
L_main4:
;toca2.c,26 :: 		k=0;
0x014A	0xEF2000  	CLR	W0
0x014C	0x884180  	MOV	W0, _k
;toca2.c,27 :: 		}
L_main5:
;toca2.c,35 :: 		for ( i=jb[cont]+75; i>0 ; i--) {
0x014E	0x804190  	MOV	_cont, W0
0x0150	0xDD00C1  	SL	W0, #1, W1
0x0152	0x208000  	MOV	#lo_addr(_jb), W0
0x0154	0x400101  	ADD	W0, W1, W2
0x0156	0x2004B1  	MOV	#75, W1
0x0158	0x208340  	MOV	#lo_addr(_i), W0
0x015A	0x408812  	ADD	W1, [W2], [W0]
L_main6:
0x015C	0x8041A0  	MOV	_i, W0
0x015E	0xE10060  	CP	W0, #0
0x0160	0x340008  	BRA LE	L_main7
L__main15:
;toca2.c,36 :: 		Delay_ms(1);
0x0162	0x214D57  	MOV	#5333, W7
L_main9:
0x0164	0xED200E  	DEC	W7
0x0166	0x3AFFFE  	BRA NZ	L_main9
0x0168	0x000000  	NOP
;toca2.c,35 :: 		for ( i=jb[cont]+75; i>0 ; i--) {
0x016A	0x200011  	MOV	#1, W1
0x016C	0x208340  	MOV	#lo_addr(_i), W0
0x016E	0x108810  	SUBR	W1, [W0], [W0]
;toca2.c,37 :: 		}
0x0170	0x37FFF5  	BRA	L_main6
L_main7:
;toca2.c,38 :: 		if (cont<22){
0x0172	0x804190  	MOV	_cont, W0
0x0174	0xE10076  	CP	W0, #22
0x0176	0x3D0004  	BRA GE	L_main11
L__main16:
;toca2.c,39 :: 		cont++;
0x0178	0x200011  	MOV	#1, W1
0x017A	0x208320  	MOV	#lo_addr(_cont), W0
0x017C	0x408810  	ADD	W1, [W0], [W0]
;toca2.c,40 :: 		}else{
0x017E	0x370002  	BRA	L_main12
L_main11:
;toca2.c,41 :: 		cont=0;
0x0180	0xEF2000  	CLR	W0
0x0182	0x884190  	MOV	W0, _cont
;toca2.c,42 :: 		}
L_main12:
;toca2.c,43 :: 		}
0x0184	0x37FFCB  	BRA	L_main0
;toca2.c,44 :: 		}
L_end_main:
L__main_end_loop:
0x0186	0x37FFFF  	BRA	L__main_end_loop
; end of _main
0x01BC	0x20800A  	MOV	#2048, W10
0x01BE	0x20000B  	MOV	#0, W11
0x01C0	0x09001A  	REPEAT	#26
0x01C2	0x781D0B  	MOV	W11, [W10++]
0x01C4	0x060000  	RETURN
0x01C6	0x208001  	MOV	#lo_addr(_jb), W1
0x01C8	0x281880  	MOV	#33160, W0
0x01CA	0x090019  	REPEAT	#25
0x01CC	0x7818B0  	MOV	[W0++], [W1++]
0x01CE	0x060000  	RETURN
;toca2.c,0 :: ?ICS_jb [44]
0x0188	0x0096 ;?ICS_jb+0
0x018A	0x0096 ;?ICS_jb+2
0x018C	0x012C ;?ICS_jb+4
0x018E	0x0096 ;?ICS_jb+6
0x0190	0x0096 ;?ICS_jb+8
0x0192	0x00FA ;?ICS_jb+10
0x0194	0x0096 ;?ICS_jb+12
0x0196	0x0096 ;?ICS_jb+14
0x0198	0x00C8 ;?ICS_jb+16
0x019A	0x004B ;?ICS_jb+18
0x019C	0x01F4 ;?ICS_jb+20
0x019E	0x0096 ;?ICS_jb+22
0x01A0	0x0096 ;?ICS_jb+24
0x01A2	0x012C ;?ICS_jb+26
0x01A4	0x0096 ;?ICS_jb+28
0x01A6	0x0096 ;?ICS_jb+30
0x01A8	0x00FA ;?ICS_jb+32
0x01AA	0x0096 ;?ICS_jb+34
0x01AC	0x0096 ;?ICS_jb+36
0x01AE	0x0096 ;?ICS_jb+38
0x01B0	0x0096 ;?ICS_jb+40
0x01B2	0x0320 ;?ICS_jb+42
; end of ?ICS_jb
;toca2.c,0 :: ?ICS_mux [4]
0x01B4	0xFAFC ;?ICS_mux+0
0x01B6	0xEEF6 ;?ICS_mux+2
; end of ?ICS_mux
;toca2.c,0 :: ?ICS_k [2]
0x01B8	0x0000 ;?ICS_k+0
; end of ?ICS_k
;toca2.c,0 :: ?ICS_cont [2]
0x01BA	0x0000 ;?ICS_cont+0
; end of ?ICS_cont
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0100     [136]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0834       [2]    _i
0x02D8       [2]    TRISE
0x02A8       [2]    ADPCFG
0x02DC       [2]    LATE
0x0800      [44]    _jb
0x082C       [4]    _mux
0x0830       [2]    _k
0x0832       [2]    _cont
0x02A8       [2]    ADPCFG
0x02D8       [2]    TRISE
0x02DC       [2]    LATE
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x0188      [44]    ?ICS_jb
0x01B4       [4]    ?ICS_mux
0x01B8       [2]    ?ICS_k
0x01BA       [2]    ?ICS_cont
