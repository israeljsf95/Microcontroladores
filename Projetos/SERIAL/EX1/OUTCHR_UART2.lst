;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 02/03/2020 08:41:30
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x000000040158  	GOTO	_main
0x0004	0x000000  	0
0x0006	0x000000  	0
0x0008	0x000000  	0
0x000A	0x000000  	0
0x000C	0x000000  	0
0x000E	0x000000  	0
0x0010	0x000000  	0
0x0012	0x000000  	0
0x0014	0x000000  	0
0x0016	0x000000  	0
0x0018	0x000000  	0
0x001A	0x000000  	0
0x001C	0x000000  	0
0x001E	0x000000  	0
0x0020	0x000000  	0
0x0022	0x000000  	0
0x0024	0x000000  	0
0x0026	0x000000  	0
0x0028	0x000000  	0
0x002A	0x000000  	0
0x002C	0x000000  	0
0x002E	0x000000  	0
0x0030	0x000000  	0
0x0032	0x000000  	0
0x0034	0x000000  	0
0x0036	0x000000  	0
0x0038	0x000000  	0
0x003A	0x000000  	0
0x003C	0x000000  	0
0x003E	0x000000  	0
0x0040	0x000000  	0
0x0042	0x000000  	0
0x0044	0x000000  	0
0x0046	0x00013C  	316
0x0048	0x000000  	0
0x004A	0x000000  	0
0x004C	0x000000  	0
0x004E	0x000000  	0
0x0050	0x000000  	0
0x0052	0x000000  	0
0x0054	0x000000  	0
0x0056	0x000000  	0
0x0058	0x000000  	0
0x005A	0x000000  	0
0x005C	0x000000  	0
0x005E	0x000000  	0
0x0060	0x000000  	0
0x0062	0x000000  	0
0x0064	0x000000  	0
0x0066	0x000000  	0
0x0068	0x000000  	0
0x006A	0x000000  	0
0x006C	0x000000  	0
0x006E	0x000000  	0
0x0070	0x000000  	0
0x0072	0x000000  	0
0x0074	0x000000  	0
0x0076	0x000000  	0
0x0078	0x000000  	0
0x007A	0x000000  	0
0x007C	0x000000  	0
0x007E	0x000000  	0
0x0080	0x000000  	0
0x0082	0x000000  	0
0x0084	0x000000  	0
0x0086	0x000000  	0
0x0088	0x000000  	0
0x008A	0x000000  	0
0x008C	0x000000  	0
0x008E	0x000000  	0
0x0090	0x000000  	0
0x0092	0x000000  	0
0x0094	0x000000  	0
0x0096	0x000000  	0
0x0098	0x000000  	0
0x009A	0x000000  	0
0x009C	0x000000  	0
0x009E	0x000000  	0
0x00A0	0x000000  	0
0x00A2	0x000000  	0
0x00A4	0x000000  	0
0x00A6	0x000000  	0
0x00A8	0x000000  	0
0x00AA	0x000000  	0
0x00AC	0x000000  	0
0x00AE	0x000000  	0
0x00B0	0x000000  	0
0x00B2	0x000000  	0
0x00B4	0x000000  	0
0x00B6	0x000000  	0
0x00B8	0x000000  	0
0x00BA	0x000000  	0
0x00BC	0x000000  	0
0x00BE	0x000000  	0
0x00C0	0x000000  	0
0x00C2	0x000000  	0
0x00C4	0x000000  	0
0x00C6	0x000000  	0
0x00C8	0x000000  	0
0x00CA	0x000000  	0
0x00CC	0x000000  	0
0x00CE	0x000000  	0
0x00D0	0x000000  	0
0x00D2	0x000000  	0
0x00D4	0x000000  	0
0x00D6	0x000000  	0
0x00D8	0x000000  	0
0x00DA	0x000000  	0
0x00DC	0x000000  	0
0x00DE	0x000000  	0
0x00E0	0x000000  	0
0x00E2	0x000000  	0
0x00E4	0x000000  	0
0x00E6	0x000000  	0
0x00E8	0x000000  	0
0x00EA	0x000000  	0
0x00EC	0x000000  	0
0x00EE	0x000000  	0
0x00F0	0x000000  	0
0x00F2	0x000000  	0
0x00F4	0x000000  	0
0x00F6	0x000000  	0
0x00F8	0x000000  	0
0x00FA	0x000000  	0
0x00FC	0x000000  	0
0x00FE	0x000000  	0
_main:
0x0158	0x20802F  	MOV	#2050, W15
0x015A	0x20FFF0  	MOV	#4095, W0
0x015C	0xB7A020  	MOV	WREG, SPLIM
0x015E	0x200000  	MOV	#0, W0
0x0160	0xB7A034  	MOV	WREG, PSVPAG
0x0162	0x200040  	MOV	#4, W0
0x0164	0xB72044  	IOR	CORCON
0x0166	0x000000020190  	CALL	400
;OUTCHR_UART2.c,42 :: 		void main(){
;OUTCHR_UART2.c,43 :: 		ADPCFG = 0xFFFF;
0x016A	0x781F8A  	PUSH	W10
0x016C	0x2FFFF0  	MOV	#65535, W0
0x016E	0xB7A2A8  	MOV	WREG, ADPCFG
;OUTCHR_UART2.c,44 :: 		TRISB = 0x0000;
0x0170	0xEF22C6  	CLR	TRISB
;OUTCHR_UART2.c,46 :: 		INIT_UART2(103);
0x0172	0xB3C67A  	MOV.B	#103, W10
0x0174	0x07FFD8  	RCALL	_INIT_UART2
;OUTCHR_UART2.c,47 :: 		OUTCHR_UART2(0x030);
0x0176	0xB3C30A  	MOV.B	#48, W10
0x0178	0x07FFD0  	RCALL	_OUTCHR_UART2
;OUTCHR_UART2.c,48 :: 		while(1){
L_main6:
;OUTCHR_UART2.c,49 :: 		m = INCHR_UART2();
0x017A	0x07FFC2  	RCALL	_INCHR_UART2
0x017C	0x208001  	MOV	#lo_addr(_m), W1
0x017E	0x784880  	MOV.B	W0, [W1]
;OUTCHR_UART2.c,50 :: 		echo(m);
0x0180	0x784500  	MOV.B	W0, W10
0x0182	0x07FFC4  	RCALL	_echo
;OUTCHR_UART2.c,51 :: 		LATB = m;
0x0184	0x208000  	MOV	#lo_addr(_m), W0
0x0186	0xFB8010  	ZE	[W0], W0
0x0188	0xB7A2CA  	MOV	WREG, LATB
;OUTCHR_UART2.c,52 :: 		};
0x018A	0x37FFF7  	BRA	L_main6
;OUTCHR_UART2.c,54 :: 		}
L_end_main:
0x018C	0x78054F  	POP	W10
L__main_end_loop:
0x018E	0x37FFFF  	BRA	L__main_end_loop
; end of _main
_INIT_UART2:
;OUTCHR_UART2.c,7 :: 		void INIT_UART2(unsigned char valor_baud){
;OUTCHR_UART2.c,8 :: 		U2BRG = valor_baud;  //Configurar UART: 8bits de dados, 1 it de parada, sem paridade
0x0126	0xFB800A  	ZE	W10, W0
0x0128	0xB7A21E  	MOV	WREG, U2BRG
;OUTCHR_UART2.c,9 :: 		U2MODE = 0x0000; //ver tabela para saber as outras configurações
0x012A	0xEF2216  	CLR	U2MODE
;OUTCHR_UART2.c,10 :: 		U2STA = 0x0000;
0x012C	0xEF2218  	CLR	U2STA
;OUTCHR_UART2.c,11 :: 		IFS1bits.U2TXIF = 0;  //Zera a flag de interrupcao de Tx
0x012E	0xA92087  	BCLR	IFS1bits, #9
;OUTCHR_UART2.c,12 :: 		IEC1bits.U2TXIE = 0;  //Desabilita a interrupcao de Tx
0x0130	0xA9208F  	BCLR	IEC1bits, #9
;OUTCHR_UART2.c,13 :: 		IFS1bits.U2RXIF = 0;  //Zera a flag de de interrupcao de Rx
0x0132	0xA90087  	BCLR	IFS1bits, #8
;OUTCHR_UART2.c,14 :: 		IEC1bits.U2RXIE = 0;  //Desabilita a flag de interrupcao de Rx
0x0134	0xA9008F  	BCLR	IEC1bits, #8
;OUTCHR_UART2.c,15 :: 		U2MODEbits.UARTEN = 1; //Liga a UART
0x0136	0xA8E217  	BSET	U2MODEbits, #15
;OUTCHR_UART2.c,16 :: 		U2STAbits.UTXEN = 1;   //Começa a comunicação
0x0138	0xA84219  	BSET	U2STAbits, #10
;OUTCHR_UART2.c,17 :: 		}
L_end_INIT_UART2:
0x013A	0x060000  	RETURN
; end of _INIT_UART2
_OUTCHR_UART2:
;OUTCHR_UART2.c,20 :: 		void OUTCHR_UART2(unsigned char c){
;OUTCHR_UART2.c,21 :: 		while( U2STAbits.UTXBF);
L_OUTCHR_UART20:
0x011A	0xAE2219  	BTSS	U2STAbits, #9
0x011C	0x370001  	BRA	L_OUTCHR_UART21
0x011E	0x37FFFD  	BRA	L_OUTCHR_UART20
L_OUTCHR_UART21:
;OUTCHR_UART2.c,22 :: 		U2TXREG = c; // escreve caractere
0x0120	0xFB800A  	ZE	W10, W0
0x0122	0xB7A21A  	MOV	WREG, U2TXREG
;OUTCHR_UART2.c,23 :: 		}
L_end_OUTCHR_UART2:
0x0124	0x060000  	RETURN
; end of _OUTCHR_UART2
_INCHR_UART2:
;OUTCHR_UART2.c,26 :: 		unsigned char INCHR_UART2(){
;OUTCHR_UART2.c,28 :: 		while(!U2STAbits.URXDA);
L_INCHR_UART22:
0x0100	0xAF0218  	BTSC	U2STAbits, #0
0x0102	0x370001  	BRA	L_INCHR_UART23
0x0104	0x37FFFD  	BRA	L_INCHR_UART22
L_INCHR_UART23:
;OUTCHR_UART2.c,29 :: 		c = U2RXREG; // escreve caractere
; c start address is: 2 (W1)
0x0106	0x8010E1  	MOV	U2RXREG, W1
;OUTCHR_UART2.c,30 :: 		return c;
0x0108	0x784001  	MOV.B	W1, W0
; c end address is: 2 (W1)
;OUTCHR_UART2.c,31 :: 		}
L_end_INCHR_UART2:
0x010A	0x060000  	RETURN
; end of _INCHR_UART2
_echo:
;OUTCHR_UART2.c,33 :: 		void echo(unsigned char c){
;OUTCHR_UART2.c,34 :: 		while (U2STAbits.UTXBF){
L_echo4:
0x010C	0xAE2219  	BTSS	U2STAbits, #9
0x010E	0x370004  	BRA	L_echo5
;OUTCHR_UART2.c,35 :: 		U2TXREG = INCHR_UART2(); // escreve caractere
0x0110	0x07FFF7  	RCALL	_INCHR_UART2
0x0112	0xFB8000  	ZE	W0, W0
0x0114	0xB7A21A  	MOV	WREG, U2TXREG
;OUTCHR_UART2.c,36 :: 		}
0x0116	0x37FFFA  	BRA	L_echo4
L_echo5:
;OUTCHR_UART2.c,37 :: 		}
L_end_echo:
0x0118	0x060000  	RETURN
; end of _echo
0x0190	0x20800A  	MOV	#2048, W10
0x0192	0x20000B  	MOV	#0, W11
0x0194	0x090000  	REPEAT	#0
0x0196	0x781D0B  	MOV	W11, [W10++]
0x0198	0x060000  	RETURN
_Tx_serial2:
0x013C	0xF80034  	PUSH	PSVPAG
0x013E	0xF80036  	PUSH	RCOUNT
0x0140	0x781F80  	PUSH	W0
0x0142	0x200020  	MOV	#2, W0
0x0144	0x09000C  	REPEAT	#12
0x0146	0x781FB0  	PUSH	[W0++]
;OUTCHR_UART2.c,3 :: 		void Tx_serial2() iv IVT_ADDR_U2TXINTERRUPT{
;OUTCHR_UART2.c,4 :: 		IFS1bits.U2TXIF = 0;
0x0148	0xA92087  	BCLR	IFS1bits, #9
;OUTCHR_UART2.c,5 :: 		}
L_end_Tx_serial2:
0x014A	0x2001A0  	MOV	#26, W0
0x014C	0x09000C  	REPEAT	#12
0x014E	0x78104F  	POP	[W0--]
0x0150	0x78004F  	POP	W0
0x0152	0xF90036  	POP	RCOUNT
0x0154	0xF90034  	POP	PSVPAG
0x0156	0x064000  	RETFIE
; end of _Tx_serial2
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0100      [12]    _INCHR_UART2
0x010C      [14]    _echo
0x011A      [12]    _OUTCHR_UART2
0x0126      [22]    _INIT_UART2
0x013C      [28]    _Tx_serial2
0x0158      [56]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0218       [2]    U2STA
0x0216       [2]    U2MODE
0x021E       [2]    U2BRG
0x0216       [2]    U2MODEbits
0x008E       [2]    IEC1bits
0x0086       [2]    IFS1bits
0x02CA       [2]    LATB
0x021A       [2]    U2TXREG
0x021C       [2]    U2RXREG
0x0218       [2]    U2STAbits
0x0800       [1]    _m
0x02C6       [2]    TRISB
0x02A8       [2]    ADPCFG
0x0014       [1]    FARG_echo_c
0x0014       [1]    FARG_OUTCHR_UART2_c
0x0014       [1]    FARG_INIT_UART2_valor_baud
0x0216       [2]    U2MODE
0x0218       [2]    U2STA
0x021A       [2]    U2TXREG
0x021C       [2]    U2RXREG
0x021E       [2]    U2BRG
0x02A8       [2]    ADPCFG
0x02C6       [2]    TRISB
0x02CA       [2]    LATB
