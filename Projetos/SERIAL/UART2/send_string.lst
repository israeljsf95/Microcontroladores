;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 06/03/2020 08:40:32
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x000000040186  	GOTO	_main
0x0004	0x000000  	0
0x0006	0x000000  	0
0x0008	0x000000  	0
0x000A	0x000000  	0
0x000C	0x000000  	0
0x000E	0x000000  	0
0x0010	0x000000  	0
0x0012	0x000000  	0
0x0014	0x000000  	0
0x0016	0x000000  	0
0x0018	0x000000  	0
0x001A	0x00012E  	302
0x001C	0x000000  	0
0x001E	0x000000  	0
0x0020	0x000000  	0
0x0022	0x000000  	0
0x0024	0x000000  	0
0x0026	0x000000  	0
0x0028	0x000000  	0
0x002A	0x000000  	0
0x002C	0x000000  	0
0x002E	0x000000  	0
0x0030	0x000000  	0
0x0032	0x000000  	0
0x0034	0x000000  	0
0x0036	0x000000  	0
0x0038	0x000000  	0
0x003A	0x000000  	0
0x003C	0x000000  	0
0x003E	0x000000  	0
0x0040	0x000000  	0
0x0042	0x000000  	0
0x0044	0x000000  	0
0x0046	0x00016A  	362
0x0048	0x000000  	0
0x004A	0x000000  	0
0x004C	0x000000  	0
0x004E	0x000000  	0
0x0050	0x000000  	0
0x0052	0x000000  	0
0x0054	0x000000  	0
0x0056	0x000000  	0
0x0058	0x000000  	0
0x005A	0x000000  	0
0x005C	0x000000  	0
0x005E	0x000000  	0
0x0060	0x000000  	0
0x0062	0x000000  	0
0x0064	0x000000  	0
0x0066	0x000000  	0
0x0068	0x000000  	0
0x006A	0x000000  	0
0x006C	0x000000  	0
0x006E	0x000000  	0
0x0070	0x000000  	0
0x0072	0x000000  	0
0x0074	0x000000  	0
0x0076	0x000000  	0
0x0078	0x000000  	0
0x007A	0x000000  	0
0x007C	0x000000  	0
0x007E	0x000000  	0
0x0080	0x000000  	0
0x0082	0x000000  	0
0x0084	0x000000  	0
0x0086	0x000000  	0
0x0088	0x000000  	0
0x008A	0x000000  	0
0x008C	0x000000  	0
0x008E	0x000000  	0
0x0090	0x000000  	0
0x0092	0x000000  	0
0x0094	0x000000  	0
0x0096	0x000000  	0
0x0098	0x000000  	0
0x009A	0x000000  	0
0x009C	0x000000  	0
0x009E	0x000000  	0
0x00A0	0x000000  	0
0x00A2	0x000000  	0
0x00A4	0x000000  	0
0x00A6	0x000000  	0
0x00A8	0x000000  	0
0x00AA	0x000000  	0
0x00AC	0x000000  	0
0x00AE	0x000000  	0
0x00B0	0x000000  	0
0x00B2	0x000000  	0
0x00B4	0x000000  	0
0x00B6	0x000000  	0
0x00B8	0x000000  	0
0x00BA	0x000000  	0
0x00BC	0x000000  	0
0x00BE	0x000000  	0
0x00C0	0x000000  	0
0x00C2	0x000000  	0
0x00C4	0x000000  	0
0x00C6	0x000000  	0
0x00C8	0x000000  	0
0x00CA	0x000000  	0
0x00CC	0x000000  	0
0x00CE	0x000000  	0
0x00D0	0x000000  	0
0x00D2	0x000000  	0
0x00D4	0x000000  	0
0x00D6	0x000000  	0
0x00D8	0x000000  	0
0x00DA	0x000000  	0
0x00DC	0x000000  	0
0x00DE	0x000000  	0
0x00E0	0x000000  	0
0x00E2	0x000000  	0
0x00E4	0x000000  	0
0x00E6	0x000000  	0
0x00E8	0x000000  	0
0x00EA	0x000000  	0
0x00EC	0x000000  	0
0x00EE	0x000000  	0
0x00F0	0x000000  	0
0x00F2	0x000000  	0
0x00F4	0x000000  	0
0x00F6	0x000000  	0
0x00F8	0x000000  	0
0x00FA	0x000000  	0
0x00FC	0x000000  	0
0x00FE	0x000000  	0
_main:
0x0186	0x20806F  	MOV	#2054, W15
0x0188	0x20FFF0  	MOV	#4095, W0
0x018A	0xB7A020  	MOV	WREG, SPLIM
0x018C	0x200000  	MOV	#0, W0
0x018E	0xB7A034  	MOV	WREG, PSVPAG
0x0190	0x200040  	MOV	#4, W0
0x0192	0xB72044  	IOR	CORCON
0x0194	0x0000000201FE  	CALL	510
0x0198	0x000000020208  	CALL	520
;send_string.c,53 :: 		void main(){
;send_string.c,54 :: 		ADPCFG = 0xFFFF;
0x019C	0x781F8A  	PUSH	W10
0x019E	0x2FFFF0  	MOV	#65535, W0
0x01A0	0xB7A2A8  	MOV	WREG, ADPCFG
;send_string.c,55 :: 		TRISB = 0;
0x01A2	0xEF22C6  	CLR	TRISB
;send_string.c,56 :: 		LATB = 0;
0x01A4	0xEF22CA  	CLR	LATB
;send_string.c,57 :: 		init_uart2(103);
0x01A6	0xB3C67A  	MOV.B	#103, W10
0x01A8	0x07FFB7  	RCALL	_init_uart2
;send_string.c,58 :: 		enviar_char(0x30);
0x01AA	0xB3C30A  	MOV.B	#48, W10
0x01AC	0x07FFA9  	RCALL	_enviar_char
;send_string.c,60 :: 		IEC0bits.T1IE = 1;
0x01AE	0xA8608C  	BSET.B	IEC0bits, #3
;send_string.c,61 :: 		IFS0 = 0;
0x01B0	0xEF2084  	CLR	IFS0
;send_string.c,62 :: 		PR1 = 625;
0x01B2	0x202710  	MOV	#625, W0
0x01B4	0xB7A102  	MOV	WREG, PR1
;send_string.c,63 :: 		T1CON = 0x8000;
0x01B6	0x280000  	MOV	#32768, W0
0x01B8	0xB7A104  	MOV	WREG, T1CON
;send_string.c,64 :: 		valor = 0;
0x01BA	0xEF2000  	CLR	W0
0x01BC	0x884020  	MOV	W0, _valor
;send_string.c,65 :: 		while(1){
L_main6:
;send_string.c,66 :: 		m = receber_char();
0x01BE	0x07FFA6  	RCALL	_receber_char
0x01C0	0x208021  	MOV	#lo_addr(_m), W1
0x01C2	0x784880  	MOV.B	W0, [W1]
;send_string.c,68 :: 		if (m == 'a'){
0x01C4	0xB3C611  	MOV.B	#97, W1
0x01C6	0xE10401  	CP.B	W0, W1
0x01C8	0x3A0003  	BRA NZ	L_main8
L__main20:
;send_string.c,69 :: 		valor = valor + 20;
0x01CA	0x200141  	MOV	#20, W1
0x01CC	0x208040  	MOV	#lo_addr(_valor), W0
0x01CE	0x408810  	ADD	W1, [W0], [W0]
;send_string.c,70 :: 		}
L_main8:
;send_string.c,71 :: 		if (m == 'd'){
0x01D0	0x208020  	MOV	#lo_addr(_m), W0
0x01D2	0x784090  	MOV.B	[W0], W1
0x01D4	0xB3C640  	MOV.B	#100, W0
0x01D6	0xE10C00  	CP.B	W1, W0
0x01D8	0x3A0003  	BRA NZ	L_main9
L__main21:
;send_string.c,72 :: 		valor = valor - 20;
0x01DA	0x200141  	MOV	#20, W1
0x01DC	0x208040  	MOV	#lo_addr(_valor), W0
0x01DE	0x108810  	SUBR	W1, [W0], [W0]
;send_string.c,73 :: 		}
L_main9:
;send_string.c,74 :: 		if (valor <= 1){
0x01E0	0x804020  	MOV	_valor, W0
0x01E2	0xE10061  	CP	W0, #1
0x01E4	0x3C0002  	BRA GT	L_main10
L__main22:
;send_string.c,75 :: 		valor = 0;
0x01E6	0xEF2000  	CLR	W0
0x01E8	0x884020  	MOV	W0, _valor
;send_string.c,76 :: 		}
L_main10:
;send_string.c,77 :: 		if (valor >= 99){
0x01EA	0x200631  	MOV	#99, W1
0x01EC	0x208040  	MOV	#lo_addr(_valor), W0
0x01EE	0xE10810  	CP	W1, [W0]
0x01F0	0x3C0002  	BRA GT	L_main11
L__main23:
;send_string.c,78 :: 		valor = 100;
0x01F2	0x200640  	MOV	#100, W0
0x01F4	0x884020  	MOV	W0, _valor
;send_string.c,79 :: 		}
L_main11:
;send_string.c,88 :: 		}
0x01F6	0x37FFE3  	BRA	L_main6
;send_string.c,89 :: 		}
L_end_main:
0x01F8	0x78054F  	POP	W10
L__main_end_loop:
0x01FA	0x37FFFF  	BRA	L__main_end_loop
; end of _main
_init_uart2:
;send_string.c,8 :: 		void init_uart2(unsigned char baud_rate){
;send_string.c,9 :: 		U2BRG = baud_rate;
0x0118	0xFB800A  	ZE	W10, W0
0x011A	0xB7A21E  	MOV	WREG, U2BRG
;send_string.c,10 :: 		U2MODE = 0;
0x011C	0xEF2216  	CLR	U2MODE
;send_string.c,11 :: 		U2STA = 0;
0x011E	0xEF2218  	CLR	U2STA
;send_string.c,12 :: 		IFS1bits.U2TXIF = 0;
0x0120	0xA92087  	BCLR	IFS1bits, #9
;send_string.c,13 :: 		IEC1bits.U2TXIE = 0;
0x0122	0xA9208F  	BCLR	IEC1bits, #9
;send_string.c,14 :: 		IFS1BITS.U2RXIF = 0;
0x0124	0xA90087  	BCLR	IFS1bits, #8
;send_string.c,15 :: 		IEC1bits.U2RXIE = 0;
0x0126	0xA9008F  	BCLR	IEC1bits, #8
;send_string.c,16 :: 		U2MODEbits.UARTEN = 1;
0x0128	0xA8E217  	BSET	U2MODEbits, #15
;send_string.c,17 :: 		U2STAbits.UTXEN = 1;
0x012A	0xA84219  	BSET	U2STAbits, #10
;send_string.c,18 :: 		}
L_end_init_uart2:
0x012C	0x060000  	RETURN
; end of _init_uart2
_enviar_char:
;send_string.c,37 :: 		void enviar_char(unsigned char c){
;send_string.c,38 :: 		while(U2STAbits.UTXBF);
L_enviar_char2:
0x0100	0xAE2219  	BTSS	U2STAbits, #9
0x0102	0x370001  	BRA	L_enviar_char3
0x0104	0x37FFFD  	BRA	L_enviar_char2
L_enviar_char3:
;send_string.c,39 :: 		U2TXREG = c;
0x0106	0xFB800A  	ZE	W10, W0
0x0108	0xB7A21A  	MOV	WREG, U2TXREG
;send_string.c,40 :: 		}
L_end_enviar_char:
0x010A	0x060000  	RETURN
; end of _enviar_char
_receber_char:
;send_string.c,42 :: 		unsigned char receber_char(){
;send_string.c,44 :: 		while(!U2STAbits.URXDA);
L_receber_char4:
0x010C	0xAF0218  	BTSC	U2STAbits, #0
0x010E	0x370001  	BRA	L_receber_char5
0x0110	0x37FFFD  	BRA	L_receber_char4
L_receber_char5:
;send_string.c,45 :: 		c = U2RXREG;
; c start address is: 2 (W1)
0x0112	0x8010E1  	MOV	U2RXREG, W1
;send_string.c,46 :: 		return c;
0x0114	0x784001  	MOV.B	W1, W0
; c end address is: 2 (W1)
;send_string.c,47 :: 		}
L_end_receber_char:
0x0116	0x060000  	RETURN
; end of _receber_char
0x01FE	0x20800A  	MOV	#2048, W10
0x0200	0x20000B  	MOV	#0, W11
0x0202	0x090002  	REPEAT	#2
0x0204	0x781D0B  	MOV	W11, [W10++]
0x0206	0x060000  	RETURN
0x0208	0x208001  	MOV	#lo_addr(_cont), W1
0x020A	0x281FC0  	MOV	#33276, W0
0x020C	0x090000  	REPEAT	#0
0x020E	0x7818B0  	MOV	[W0++], [W1++]
0x0210	0x060000  	RETURN
_Tx_serial2:
0x016A	0xF80034  	PUSH	PSVPAG
0x016C	0xF80036  	PUSH	RCOUNT
0x016E	0x781F80  	PUSH	W0
0x0170	0x200020  	MOV	#2, W0
0x0172	0x09000C  	REPEAT	#12
0x0174	0x781FB0  	PUSH	[W0++]
;send_string.c,2 :: 		void Tx_serial2() iv IVT_ADDR_U2TXINTERRUPT{
;send_string.c,4 :: 		IFS1bits.U2TXIF = 0;
0x0176	0xA92087  	BCLR	IFS1bits, #9
;send_string.c,5 :: 		}
L_end_Tx_serial2:
0x0178	0x2001A0  	MOV	#26, W0
0x017A	0x09000C  	REPEAT	#12
0x017C	0x78104F  	POP	[W0--]
0x017E	0x78004F  	POP	W0
0x0180	0xF90036  	POP	RCOUNT
0x0182	0xF90034  	POP	PSVPAG
0x0184	0x064000  	RETFIE
; end of _Tx_serial2
_timer:
0x012E	0xF80034  	PUSH	PSVPAG
0x0130	0xF80036  	PUSH	RCOUNT
0x0132	0x781F80  	PUSH	W0
0x0134	0x200020  	MOV	#2, W0
0x0136	0x09000C  	REPEAT	#12
0x0138	0x781FB0  	PUSH	[W0++]
;send_string.c,23 :: 		void timer() iv IVT_ADDR_T1INTERRUPT {
;send_string.c,24 :: 		cont++;
0x013A	0x200011  	MOV	#1, W1
0x013C	0x208000  	MOV	#lo_addr(_cont), W0
0x013E	0x408810  	ADD	W1, [W0], [W0]
;send_string.c,26 :: 		if (cont == valor+1){
0x0140	0x804020  	MOV	_valor, W0
0x0142	0x4000E1  	ADD	W0, #1, W1
0x0144	0x208000  	MOV	#lo_addr(_cont), W0
0x0146	0xE10810  	CP	W1, [W0]
0x0148	0x3A0001  	BRA NZ	L_timer0
L__timer15:
;send_string.c,27 :: 		LATBbits.LATB0 = 0;
0x014A	0xA902CA  	BCLR.B	LATBbits, #0
;send_string.c,28 :: 		}
L_timer0:
;send_string.c,29 :: 		if (cont == 99){
0x014C	0x200631  	MOV	#99, W1
0x014E	0x208000  	MOV	#lo_addr(_cont), W0
0x0150	0xE10810  	CP	W1, [W0]
0x0152	0x3A0003  	BRA NZ	L_timer1
L__timer16:
;send_string.c,30 :: 		LATBbits.LATB0 = 1;
0x0154	0xA802CA  	BSET.B	LATBbits, #0
;send_string.c,31 :: 		cont = 0;
0x0156	0xEF2000  	CLR	W0
0x0158	0x884000  	MOV	W0, _cont
;send_string.c,32 :: 		}
L_timer1:
;send_string.c,34 :: 		IFS0bits.T1IF = 0;
0x015A	0xA96084  	BCLR.B	IFS0bits, #3
;send_string.c,35 :: 		}
L_end_timer:
0x015C	0x2001A0  	MOV	#26, W0
0x015E	0x09000C  	REPEAT	#12
0x0160	0x78104F  	POP	[W0--]
0x0162	0x78004F  	POP	W0
0x0164	0xF90036  	POP	RCOUNT
0x0166	0xF90034  	POP	PSVPAG
0x0168	0x064000  	RETFIE
; end of _timer
;send_string.c,0 :: ?ICS_cont [2]
0x01FC	0x0000 ;?ICS_cont+0
; end of ?ICS_cont
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0100      [12]    _enviar_char
0x010C      [12]    _receber_char
0x0118      [22]    _init_uart2
0x012E      [60]    _timer
0x016A      [28]    _Tx_serial2
0x0186     [118]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0218       [2]    U2STA
0x0086       [2]    IFS1bits
0x0216       [2]    U2MODE
0x0802       [1]    _m
0x021E       [2]    U2BRG
0x02CA       [2]    LATBbits
0x0084       [2]    IFS0bits
0x008E       [2]    IEC1bits
0x0216       [2]    U2MODEbits
0x0804       [2]    _valor
0x02A8       [2]    ADPCFG
0x02C6       [2]    TRISB
0x021C       [2]    U2RXREG
0x0218       [2]    U2STAbits
0x021A       [2]    U2TXREG
0x0102       [2]    PR1
0x0104       [2]    T1CON
0x0084       [2]    IFS0
0x02CA       [2]    LATB
0x008C       [2]    IEC0bits
0x0800       [2]    _cont
0x0084       [2]    IFS0
0x0014       [1]    FARG_enviar_char_c
0x0102       [2]    PR1
0x0104       [2]    T1CON
0x0014       [1]    FARG_init_uart2_baud_rate
0x0216       [2]    U2MODE
0x0218       [2]    U2STA
0x021A       [2]    U2TXREG
0x021C       [2]    U2RXREG
0x021E       [2]    U2BRG
0x02A8       [2]    ADPCFG
0x02C6       [2]    TRISB
0x02CA       [2]    LATB
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x01FC       [2]    ?ICS_cont
