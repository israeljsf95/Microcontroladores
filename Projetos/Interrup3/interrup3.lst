;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 02/12/2019 08:50:07
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x00000004012E  	GOTO	_main
0x0004	0x000000  	0
0x0006	0x000000  	0
0x0008	0x000000  	0
0x000A	0x000000  	0
0x000C	0x000000  	0
0x000E	0x000000  	0
0x0010	0x000000  	0
0x0012	0x000000  	0
0x0014	0x000100  	256
0x0016	0x000000  	0
0x0018	0x000000  	0
0x001A	0x000000  	0
0x001C	0x000000  	0
0x001E	0x000000  	0
0x0020	0x000000  	0
0x0022	0x000000  	0
0x0024	0x000000  	0
0x0026	0x000000  	0
0x0028	0x000000  	0
0x002A	0x000000  	0
0x002C	0x000000  	0
0x002E	0x000000  	0
0x0030	0x000000  	0
0x0032	0x000000  	0
0x0034	0x000000  	0
0x0036	0x000000  	0
0x0038	0x000000  	0
0x003A	0x000000  	0
0x003C	0x000000  	0
0x003E	0x000000  	0
0x0040	0x000000  	0
0x0042	0x000000  	0
0x0044	0x000000  	0
0x0046	0x000000  	0
0x0048	0x000000  	0
0x004A	0x000000  	0
0x004C	0x000000  	0
0x004E	0x000000  	0
0x0050	0x000000  	0
0x0052	0x000000  	0
0x0054	0x000000  	0
0x0056	0x000000  	0
0x0058	0x000000  	0
0x005A	0x000000  	0
0x005C	0x000000  	0
0x005E	0x000000  	0
0x0060	0x000000  	0
0x0062	0x000000  	0
0x0064	0x000000  	0
0x0066	0x000000  	0
0x0068	0x000000  	0
0x006A	0x000000  	0
0x006C	0x000000  	0
0x006E	0x000000  	0
0x0070	0x000000  	0
0x0072	0x000000  	0
0x0074	0x000000  	0
0x0076	0x000000  	0
0x0078	0x000000  	0
0x007A	0x000000  	0
0x007C	0x000000  	0
0x007E	0x000000  	0
0x0080	0x000000  	0
0x0082	0x000000  	0
0x0084	0x000000  	0
0x0086	0x000000  	0
0x0088	0x000000  	0
0x008A	0x000000  	0
0x008C	0x000000  	0
0x008E	0x000000  	0
0x0090	0x000000  	0
0x0092	0x000000  	0
0x0094	0x000000  	0
0x0096	0x000000  	0
0x0098	0x000000  	0
0x009A	0x000000  	0
0x009C	0x000000  	0
0x009E	0x000000  	0
0x00A0	0x000000  	0
0x00A2	0x000000  	0
0x00A4	0x000000  	0
0x00A6	0x000000  	0
0x00A8	0x000000  	0
0x00AA	0x000000  	0
0x00AC	0x000000  	0
0x00AE	0x000000  	0
0x00B0	0x000000  	0
0x00B2	0x000000  	0
0x00B4	0x000000  	0
0x00B6	0x000000  	0
0x00B8	0x000000  	0
0x00BA	0x000000  	0
0x00BC	0x000000  	0
0x00BE	0x000000  	0
0x00C0	0x000000  	0
0x00C2	0x000000  	0
0x00C4	0x000000  	0
0x00C6	0x000000  	0
0x00C8	0x000000  	0
0x00CA	0x000000  	0
0x00CC	0x000000  	0
0x00CE	0x000000  	0
0x00D0	0x000000  	0
0x00D2	0x000000  	0
0x00D4	0x000000  	0
0x00D6	0x000000  	0
0x00D8	0x000000  	0
0x00DA	0x000000  	0
0x00DC	0x000000  	0
0x00DE	0x000000  	0
0x00E0	0x000000  	0
0x00E2	0x000000  	0
0x00E4	0x000000  	0
0x00E6	0x000000  	0
0x00E8	0x000000  	0
0x00EA	0x000000  	0
0x00EC	0x000000  	0
0x00EE	0x000000  	0
0x00F0	0x000000  	0
0x00F2	0x000000  	0
0x00F4	0x000000  	0
0x00F6	0x000000  	0
0x00F8	0x000000  	0
0x00FA	0x000000  	0
0x00FC	0x000000  	0
0x00FE	0x000000  	0
_main:
0x012E	0x20818F  	MOV	#2072, W15
0x0130	0x20FFF0  	MOV	#4095, W0
0x0132	0xB7A020  	MOV	WREG, SPLIM
0x0134	0x200000  	MOV	#0, W0
0x0136	0xB7A034  	MOV	WREG, PSVPAG
0x0138	0x200040  	MOV	#4, W0
0x013A	0xB72044  	IOR	CORCON
0x013C	0x00000002028E  	CALL	654
0x0140	0x000000020298  	CALL	664
;interrup3.c,25 :: 		void main () {
;interrup3.c,27 :: 		ADPCFG = 0xFFFF; // porta B digital
0x0144	0x2FFFF0  	MOV	#65535, W0
0x0146	0xB7A2A8  	MOV	WREG, ADPCFG
;interrup3.c,28 :: 		TRISD = 0; // inicialização
0x0148	0xEF22D2  	CLR	TRISD
;interrup3.c,29 :: 		TRISB = 0; // porta B de saída
0x014A	0xEF22C6  	CLR	TRISB
;interrup3.c,30 :: 		LATB = 0; // inicialização
0x014C	0xEF22CA  	CLR	LATB
;interrup3.c,32 :: 		TRISE = 0x0100; // porta A com pino 8 de entrada (INT0 = RE4)
0x014E	0x201000  	MOV	#256, W0
0x0150	0xB7A2D8  	MOV	WREG, TRISE
;interrup3.c,36 :: 		IFS0 = 0; // inicialização do registrador de interrupção IFS0 --> desabilitação de flag
0x0152	0xEF2084  	CLR	IFS0
;interrup3.c,38 :: 		IEC0bits.INT0IE = 1; // habilitação de INT0
0x0154	0xA8008C  	BSET.B	IEC0bits, #0
;interrup3.c,40 :: 		INTCON2.INT0EP = 0; // configuração de borda de subida;
0x0156	0xA90082  	BCLR.B	INTCON2, #0
;interrup3.c,44 :: 		while(1){
L_main2:
;interrup3.c,45 :: 		if (flag == 1){ // se não estiver no estado 0
0x0158	0x8040A0  	MOV	_flag, W0
0x015A	0xE10061  	CP	W0, #1
0x015C	0x3A002C  	BRA NZ	L_main4
L__main43:
;interrup3.c,46 :: 		for(k = 0; k<250 ; k++){
0x015E	0xEF2000  	CLR	W0
0x0160	0x8840B0  	MOV	W0, _k
L_main5:
0x0162	0x200FA1  	MOV	#250, W1
0x0164	0x208160  	MOV	#lo_addr(_k), W0
0x0166	0xE10810  	CP	W1, [W0]
0x0168	0x34001D  	BRA LE	L_main6
L__main44:
;interrup3.c,47 :: 		for (i = 0; i <= 3; i++){
0x016A	0xEF2000  	CLR	W0
0x016C	0x884090  	MOV	W0, _i
L_main8:
0x016E	0x804090  	MOV	_i, W0
0x0170	0xE10063  	CP	W0, #3
0x0172	0x3C0014  	BRA GT	L_main9
L__main45:
;interrup3.c,48 :: 		Delay_ms(1);
0x0174	0x214D57  	MOV	#5333, W7
L_main11:
0x0176	0xED200E  	DEC	W7
0x0178	0x3AFFFE  	BRA NZ	L_main11
0x017A	0x000000  	NOP
;interrup3.c,49 :: 		LATD = mux[i];
0x017C	0x2080A1  	MOV	#lo_addr(_mux), W1
0x017E	0x208120  	MOV	#lo_addr(_i), W0
0x0180	0x408010  	ADD	W1, [W0], W0
0x0182	0x784010  	MOV.B	[W0], W0
0x0184	0xFB8000  	ZE	W0, W0
0x0186	0xB7A2D6  	MOV	WREG, LATD
;interrup3.c,50 :: 		LATB = HOLA[i];
0x0188	0x2080E1  	MOV	#lo_addr(_HOLA), W1
0x018A	0x208120  	MOV	#lo_addr(_i), W0
0x018C	0x408010  	ADD	W1, [W0], W0
0x018E	0x784010  	MOV.B	[W0], W0
0x0190	0xFB8000  	ZE	W0, W0
0x0192	0xB7A2CA  	MOV	WREG, LATB
;interrup3.c,47 :: 		for (i = 0; i <= 3; i++){
0x0194	0x200011  	MOV	#1, W1
0x0196	0x208120  	MOV	#lo_addr(_i), W0
0x0198	0x408810  	ADD	W1, [W0], [W0]
;interrup3.c,51 :: 		}
0x019A	0x37FFE9  	BRA	L_main8
L_main9:
;interrup3.c,46 :: 		for(k = 0; k<250 ; k++){
0x019C	0x200011  	MOV	#1, W1
0x019E	0x208160  	MOV	#lo_addr(_k), W0
0x01A0	0x408810  	ADD	W1, [W0], [W0]
;interrup3.c,52 :: 		}
0x01A2	0x37FFDF  	BRA	L_main5
L_main6:
;interrup3.c,53 :: 		LATB = 0xFF;
0x01A4	0x200FF0  	MOV	#255, W0
0x01A6	0xB7A2CA  	MOV	WREG, LATB
;interrup3.c,54 :: 		Delay_ms(250);
0x01A8	0x200158  	MOV	#21, W8
0x01AA	0x2585B7  	MOV	#22619, W7
L_main13:
0x01AC	0xED200E  	DEC	W7
0x01AE	0x3AFFFE  	BRA NZ	L_main13
0x01B0	0xED2010  	DEC	W8
0x01B2	0x3AFFFC  	BRA NZ	L_main13
;interrup3.c,56 :: 		}else if(flag == 2){
0x01B4	0x37005E  	BRA	L_main15
L_main4:
0x01B6	0x8040A0  	MOV	_flag, W0
0x01B8	0xE10062  	CP	W0, #2
0x01BA	0x3A0029  	BRA NZ	L_main16
L__main46:
;interrup3.c,57 :: 		for(k = 0; k <= 9 ; k++){
0x01BC	0xEF2000  	CLR	W0
0x01BE	0x8840B0  	MOV	W0, _k
L_main17:
0x01C0	0x8040B0  	MOV	_k, W0
0x01C2	0xE10069  	CP	W0, #9
0x01C4	0x3C001B  	BRA GT	L_main18
L__main47:
;interrup3.c,58 :: 		for (i = 0; i <= 550; i++){
0x01C6	0xEF2000  	CLR	W0
0x01C8	0x884090  	MOV	W0, _i
L_main20:
0x01CA	0x804091  	MOV	_i, W1
0x01CC	0x202260  	MOV	#550, W0
0x01CE	0xE10800  	CP	W1, W0
0x01D0	0x3C0011  	BRA GT	L_main21
L__main48:
;interrup3.c,59 :: 		Delay_ms(1);
0x01D2	0x214D57  	MOV	#5333, W7
L_main23:
0x01D4	0xED200E  	DEC	W7
0x01D6	0x3AFFFE  	BRA NZ	L_main23
0x01D8	0x000000  	NOP
;interrup3.c,60 :: 		LATD = mux[0];
0x01DA	0x2080A0  	MOV	#lo_addr(_mux), W0
0x01DC	0xFB8010  	ZE	[W0], W0
0x01DE	0xB7A2D6  	MOV	WREG, LATD
;interrup3.c,61 :: 		LATB = zer_nove[k];
0x01E0	0x208001  	MOV	#lo_addr(_zer_nove), W1
0x01E2	0x208160  	MOV	#lo_addr(_k), W0
0x01E4	0x408010  	ADD	W1, [W0], W0
0x01E6	0x784010  	MOV.B	[W0], W0
0x01E8	0xFB8000  	ZE	W0, W0
0x01EA	0xB7A2CA  	MOV	WREG, LATB
;interrup3.c,58 :: 		for (i = 0; i <= 550; i++){
0x01EC	0x200011  	MOV	#1, W1
0x01EE	0x208120  	MOV	#lo_addr(_i), W0
0x01F0	0x408810  	ADD	W1, [W0], [W0]
;interrup3.c,62 :: 		}
0x01F2	0x37FFEB  	BRA	L_main20
L_main21:
;interrup3.c,57 :: 		for(k = 0; k <= 9 ; k++){
0x01F4	0x200011  	MOV	#1, W1
0x01F6	0x208160  	MOV	#lo_addr(_k), W0
0x01F8	0x408810  	ADD	W1, [W0], [W0]
;interrup3.c,63 :: 		}
0x01FA	0x37FFE2  	BRA	L_main17
L_main18:
;interrup3.c,64 :: 		LATB = 0xFF;
0x01FC	0x200FF0  	MOV	#255, W0
0x01FE	0xB7A2CA  	MOV	WREG, LATB
;interrup3.c,65 :: 		Delay_ms(250);
0x0200	0x200158  	MOV	#21, W8
0x0202	0x2585B7  	MOV	#22619, W7
L_main25:
0x0204	0xED200E  	DEC	W7
0x0206	0x3AFFFE  	BRA NZ	L_main25
0x0208	0xED2010  	DEC	W8
0x020A	0x3AFFFC  	BRA NZ	L_main25
;interrup3.c,67 :: 		}else if(flag ==3){
0x020C	0x370032  	BRA	L_main27
L_main16:
0x020E	0x8040A0  	MOV	_flag, W0
0x0210	0xE10063  	CP	W0, #3
0x0212	0x3A002A  	BRA NZ	L_main28
L__main49:
;interrup3.c,68 :: 		for(k = 0; k <= 9 ; k++){
0x0214	0xEF2000  	CLR	W0
0x0216	0x8840B0  	MOV	W0, _k
L_main29:
0x0218	0x8040B0  	MOV	_k, W0
0x021A	0xE10069  	CP	W0, #9
0x021C	0x3C001C  	BRA GT	L_main30
L__main50:
;interrup3.c,69 :: 		for (i = 0; i <= 550; i++){
0x021E	0xEF2000  	CLR	W0
0x0220	0x884090  	MOV	W0, _i
L_main32:
0x0222	0x804091  	MOV	_i, W1
0x0224	0x202260  	MOV	#550, W0
0x0226	0xE10800  	CP	W1, W0
0x0228	0x3C0012  	BRA GT	L_main33
L__main51:
;interrup3.c,70 :: 		Delay_ms(1);
0x022A	0x214D57  	MOV	#5333, W7
L_main35:
0x022C	0xED200E  	DEC	W7
0x022E	0x3AFFFE  	BRA NZ	L_main35
0x0230	0x000000  	NOP
;interrup3.c,71 :: 		LATD = mux[0];
0x0232	0x2080A0  	MOV	#lo_addr(_mux), W0
0x0234	0xFB8010  	ZE	[W0], W0
0x0236	0xB7A2D6  	MOV	WREG, LATD
;interrup3.c,72 :: 		LATB = zer_nove[9-k];
0x0238	0x8040B0  	MOV	_k, W0
0x023A	0x1000E9  	SUBR	W0, #9, W1
0x023C	0x208000  	MOV	#lo_addr(_zer_nove), W0
0x023E	0x400001  	ADD	W0, W1, W0
0x0240	0x784010  	MOV.B	[W0], W0
0x0242	0xFB8000  	ZE	W0, W0
0x0244	0xB7A2CA  	MOV	WREG, LATB
;interrup3.c,69 :: 		for (i = 0; i <= 550; i++){
0x0246	0x200011  	MOV	#1, W1
0x0248	0x208120  	MOV	#lo_addr(_i), W0
0x024A	0x408810  	ADD	W1, [W0], [W0]
;interrup3.c,73 :: 		}
0x024C	0x37FFEA  	BRA	L_main32
L_main33:
;interrup3.c,68 :: 		for(k = 0; k <= 9 ; k++){
0x024E	0x200011  	MOV	#1, W1
0x0250	0x208160  	MOV	#lo_addr(_k), W0
0x0252	0x408810  	ADD	W1, [W0], [W0]
;interrup3.c,74 :: 		}
0x0254	0x37FFE1  	BRA	L_main29
L_main30:
;interrup3.c,75 :: 		LATB = 0xFF;
0x0256	0x200FF0  	MOV	#255, W0
0x0258	0xB7A2CA  	MOV	WREG, LATB
;interrup3.c,76 :: 		Delay_ms(250);
0x025A	0x200158  	MOV	#21, W8
0x025C	0x2585B7  	MOV	#22619, W7
L_main37:
0x025E	0xED200E  	DEC	W7
0x0260	0x3AFFFE  	BRA NZ	L_main37
0x0262	0xED2010  	DEC	W8
0x0264	0x3AFFFC  	BRA NZ	L_main37
;interrup3.c,78 :: 		}else if(flag >=4){
0x0266	0x370005  	BRA	L_main39
L_main28:
0x0268	0x8040A0  	MOV	_flag, W0
0x026A	0xE10064  	CP	W0, #4
0x026C	0x350002  	BRA LT	L_main40
L__main52:
;interrup3.c,79 :: 		flag=0;
0x026E	0xEF2000  	CLR	W0
0x0270	0x8840A0  	MOV	W0, _flag
;interrup3.c,80 :: 		}
L_main40:
L_main39:
L_main27:
L_main15:
;interrup3.c,81 :: 		}
0x0272	0x37FF72  	BRA	L_main2
;interrup3.c,82 :: 		}
L_end_main:
L__main_end_loop:
0x0274	0x37FFFF  	BRA	L__main_end_loop
; end of _main
0x028E	0x20800A  	MOV	#2048, W10
0x0290	0x20000B  	MOV	#0, W11
0x0292	0x09000B  	REPEAT	#11
0x0294	0x781D0B  	MOV	W11, [W10++]
0x0296	0x060000  	RETURN
0x0298	0x208001  	MOV	#lo_addr(_zer_nove), W1
0x029A	0x282760  	MOV	#33398, W0
0x029C	0x09000B  	REPEAT	#11
0x029E	0x7818B0  	MOV	[W0++], [W1++]
0x02A0	0x060000  	RETURN
_INT0Int:
0x0100	0xF80034  	PUSH	PSVPAG
0x0102	0xF80036  	PUSH	RCOUNT
0x0104	0x781F80  	PUSH	W0
0x0106	0x200020  	MOV	#2, W0
0x0108	0x09000C  	REPEAT	#12
0x010A	0x781FB0  	PUSH	[W0++]
;interrup3.c,9 :: 		void INT0Int() iv IVT_ADDR_INT0INTERRUPT { // declaração da interrupção
;interrup3.c,10 :: 		Delay_ms(100); // delay anti-bouncing
0x010C	0x200098  	MOV	#9, W8
0x010E	0x223577  	MOV	#9047, W7
L_INT0Int0:
0x0110	0xED200E  	DEC	W7
0x0112	0x3AFFFE  	BRA NZ	L_INT0Int0
0x0114	0xED2010  	DEC	W8
0x0116	0x3AFFFC  	BRA NZ	L_INT0Int0
;interrup3.c,12 :: 		flag++;
0x0118	0x200011  	MOV	#1, W1
0x011A	0x208140  	MOV	#lo_addr(_flag), W0
0x011C	0x408810  	ADD	W1, [W0], [W0]
;interrup3.c,14 :: 		IFS0bits.INT0IF = 0; // "zeramento" da interrupção após ser executada --> desabilitação de flag
0x011E	0xA90084  	BCLR.B	IFS0bits, #0
;interrup3.c,15 :: 		}
L_end_INT0Int:
0x0120	0x2001A0  	MOV	#26, W0
0x0122	0x09000C  	REPEAT	#12
0x0124	0x78104F  	POP	[W0--]
0x0126	0x78004F  	POP	W0
0x0128	0xF90036  	POP	RCOUNT
0x012A	0xF90034  	POP	PSVPAG
0x012C	0x064000  	RETFIE
; end of _INT0Int
;interrup3.c,0 :: ?ICS_zer_nove [10]
0x0276	0xF9C0 ;?ICS_zer_nove+0
0x0278	0xB0A4 ;?ICS_zer_nove+2
0x027A	0x9299 ;?ICS_zer_nove+4
0x027C	0xF882 ;?ICS_zer_nove+6
0x027E	0x9080 ;?ICS_zer_nove+8
; end of ?ICS_zer_nove
;interrup3.c,0 :: ?ICS_mux [4]
0x0280	0xFDFE ;?ICS_mux+0
0x0282	0xF7FB ;?ICS_mux+2
; end of ?ICS_mux
;interrup3.c,0 :: ?ICS_HOLA [4]
0x0284	0xC089 ;?ICS_HOLA+0
0x0286	0x88C7 ;?ICS_HOLA+2
; end of ?ICS_HOLA
;interrup3.c,0 :: ?ICS_i [2]
0x0288	0x0000 ;?ICS_i+0
; end of ?ICS_i
;interrup3.c,0 :: ?ICS_flag [2]
0x028A	0x0000 ;?ICS_flag+0
; end of ?ICS_flag
;interrup3.c,0 :: ?ICS_k [2]
0x028C	0x0000 ;?ICS_k+0
; end of ?ICS_k
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0100      [46]    _INT0Int
0x012E     [328]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x02D6       [2]    LATD
0x0084       [2]    IFS0bits
0x02C6       [2]    TRISB
0x02CA       [2]    LATB
0x02A8       [2]    ADPCFG
0x02D2       [2]    TRISD
0x008C       [2]    IEC0bits
0x0082       [2]    INTCON2
0x02D8       [2]    TRISE
0x0084       [2]    IFS0
0x0800      [10]    _zer_nove
0x080A       [4]    _mux
0x080E       [4]    _HOLA
0x0812       [2]    _i
0x0814       [2]    _flag
0x0816       [2]    _k
0x0082       [2]    INTCON2
0x0084       [2]    IFS0
0x02A8       [2]    ADPCFG
0x02C6       [2]    TRISB
0x02CA       [2]    LATB
0x02D2       [2]    TRISD
0x02D6       [2]    LATD
0x02D8       [2]    TRISE
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x0276      [10]    ?ICS_zer_nove
0x0280       [4]    ?ICS_mux
0x0284       [4]    ?ICS_HOLA
0x0288       [2]    ?ICS_i
0x028A       [2]    ?ICS_flag
0x028C       [2]    ?ICS_k
