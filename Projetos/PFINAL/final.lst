;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 24/03/2020 19:32:07
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x000000040208  	GOTO	_main
0x0004	0x000000  	0
0x0006	0x000000  	0
0x0008	0x000000  	0
0x000A	0x000000  	0
0x000C	0x000000  	0
0x000E	0x000000  	0
0x0010	0x000000  	0
0x0012	0x000000  	0
0x0014	0x0001EC  	492
0x0016	0x000000  	0
0x0018	0x000000  	0
0x001A	0x000000  	0
0x001C	0x000000  	0
0x001E	0x000000  	0
0x0020	0x000000  	0
0x0022	0x000000  	0
0x0024	0x000000  	0
0x0026	0x000000  	0
0x0028	0x0001D0  	464
0x002A	0x000000  	0
0x002C	0x000000  	0
0x002E	0x000000  	0
0x0030	0x000000  	0
0x0032	0x000000  	0
0x0034	0x000000  	0
0x0036	0x000000  	0
0x0038	0x000000  	0
0x003A	0x000000  	0
0x003C	0x000000  	0
0x003E	0x000000  	0
0x0040	0x000000  	0
0x0042	0x000000  	0
0x0044	0x000000  	0
0x0046	0x000258  	600
0x0048	0x000000  	0
0x004A	0x000000  	0
0x004C	0x000000  	0
0x004E	0x000000  	0
0x0050	0x000000  	0
0x0052	0x000000  	0
0x0054	0x000000  	0
0x0056	0x000000  	0
0x0058	0x000000  	0
0x005A	0x000000  	0
0x005C	0x000000  	0
0x005E	0x000000  	0
0x0060	0x000000  	0
0x0062	0x000000  	0
0x0064	0x000000  	0
0x0066	0x000000  	0
0x0068	0x000000  	0
0x006A	0x000000  	0
0x006C	0x000000  	0
0x006E	0x000000  	0
0x0070	0x000000  	0
0x0072	0x000000  	0
0x0074	0x000000  	0
0x0076	0x000000  	0
0x0078	0x000000  	0
0x007A	0x000000  	0
0x007C	0x000000  	0
0x007E	0x000000  	0
0x0080	0x000000  	0
0x0082	0x000000  	0
0x0084	0x000000  	0
0x0086	0x000000  	0
0x0088	0x000000  	0
0x008A	0x000000  	0
0x008C	0x000000  	0
0x008E	0x000000  	0
0x0090	0x000000  	0
0x0092	0x000000  	0
0x0094	0x000000  	0
0x0096	0x000000  	0
0x0098	0x000000  	0
0x009A	0x000000  	0
0x009C	0x000000  	0
0x009E	0x000000  	0
0x00A0	0x000000  	0
0x00A2	0x000000  	0
0x00A4	0x000000  	0
0x00A6	0x000000  	0
0x00A8	0x000000  	0
0x00AA	0x000000  	0
0x00AC	0x000000  	0
0x00AE	0x000000  	0
0x00B0	0x000000  	0
0x00B2	0x000000  	0
0x00B4	0x000000  	0
0x00B6	0x000000  	0
0x00B8	0x000000  	0
0x00BA	0x000000  	0
0x00BC	0x000000  	0
0x00BE	0x000000  	0
0x00C0	0x000000  	0
0x00C2	0x000000  	0
0x00C4	0x000000  	0
0x00C6	0x000000  	0
0x00C8	0x000000  	0
0x00CA	0x000000  	0
0x00CC	0x000000  	0
0x00CE	0x000000  	0
0x00D0	0x000000  	0
0x00D2	0x000000  	0
0x00D4	0x000000  	0
0x00D6	0x000000  	0
0x00D8	0x000000  	0
0x00DA	0x000000  	0
0x00DC	0x000000  	0
0x00DE	0x000000  	0
0x00E0	0x000000  	0
0x00E2	0x000000  	0
0x00E4	0x000000  	0
0x00E6	0x000000  	0
0x00E8	0x000000  	0
0x00EA	0x000000  	0
0x00EC	0x000000  	0
0x00EE	0x000000  	0
0x00F0	0x000000  	0
0x00F2	0x000000  	0
0x00F4	0x000000  	0
0x00F6	0x000000  	0
0x00F8	0x000000  	0
0x00FA	0x000000  	0
0x00FC	0x000000  	0
0x00FE	0x000000  	0
_main:
0x0208	0x208C8F  	MOV	#2248, W15
0x020A	0x20FFF0  	MOV	#4095, W0
0x020C	0xB7A020  	MOV	WREG, SPLIM
0x020E	0x200000  	MOV	#0, W0
0x0210	0xB7A034  	MOV	WREG, PSVPAG
0x0212	0x200040  	MOV	#4, W0
0x0214	0xB72044  	IOR	CORCON
0x0216	0x000000020274  	CALL	628
;final.c,262 :: 		void main()
;final.c,264 :: 		ADPCFG = 0xFFFF;
0x021A	0x781F8A  	PUSH	W10
0x021C	0x2FFFF0  	MOV	#65535, W0
0x021E	0xB7A2A8  	MOV	WREG, ADPCFG
;final.c,265 :: 		TRISB = 0;
0x0220	0xEF22C6  	CLR	TRISB
;final.c,266 :: 		Init_UART1(51);
0x0222	0xB3C33A  	MOV.B	#51, W10
0x0224	0x07FF96  	RCALL	_Init_UART1
;final.c,267 :: 		Init_UART2(51);
0x0226	0xB3C33A  	MOV.B	#51, W10
0x0228	0x07FFC8  	RCALL	_Init_UART2
;final.c,269 :: 		while(1){
L_main18:
;final.c,286 :: 		receive_str2();
0x022A	0x07FFAB  	RCALL	_receive_str2
;final.c,287 :: 		send_str1(str2);
0x022C	0x20800A  	MOV	#lo_addr(_str2), W10
0x022E	0x07FFB9  	RCALL	_send_str1
;final.c,288 :: 		delay_ms(200);
0x0230	0x200118  	MOV	#17, W8
0x0232	0x246AF7  	MOV	#18095, W7
L_main20:
0x0234	0xED200E  	DEC	W7
0x0236	0x3AFFFE  	BRA NZ	L_main20
0x0238	0xED2010  	DEC	W8
0x023A	0x3AFFFC  	BRA NZ	L_main20
;final.c,289 :: 		receive_str1();
0x023C	0x07FF79  	RCALL	_receive_str1
;final.c,290 :: 		send_str2(str1);
0x023E	0x20864A  	MOV	#lo_addr(_str1), W10
0x0240	0x07FF94  	RCALL	_send_str2
;final.c,291 :: 		send_char2('\n');
0x0242	0xB3C0AA  	MOV.B	#10, W10
0x0244	0x07FF69  	RCALL	_send_char2
;final.c,292 :: 		delay_ms(200);
0x0246	0x200118  	MOV	#17, W8
0x0248	0x246AF7  	MOV	#18095, W7
L_main22:
0x024A	0xED200E  	DEC	W7
0x024C	0x3AFFFE  	BRA NZ	L_main22
0x024E	0xED2010  	DEC	W8
0x0250	0x3AFFFC  	BRA NZ	L_main22
;final.c,297 :: 		}
0x0252	0x37FFEB  	BRA	L_main18
;final.c,343 :: 		}
L_end_main:
0x0254	0x78054F  	POP	W10
L__main_end_loop:
0x0256	0x37FFFF  	BRA	L__main_end_loop
; end of _main
_Init_UART1:
;final.c,7 :: 		void Init_UART1(unsigned char valor_baud)
;final.c,9 :: 		U1BRG = valor_baud; //Configurar UART: 8bits de dados, 1 it de parada, sem paridade
0x0152	0xFB800A  	ZE	W10, W0
0x0154	0xB7A214  	MOV	WREG, U1BRG
;final.c,10 :: 		U1MODE = 0x0000;    //ver tabela para saber as outras configura??es
0x0156	0xEF220C  	CLR	U1MODE
;final.c,11 :: 		U1MODEbits.ALTIO = 1;
0x0158	0xA8420D  	BSET	U1MODEbits, #10
;final.c,12 :: 		U1STA = 0x0000;
0x015A	0xEF220E  	CLR	U1STA
;final.c,13 :: 		IFS0bits.U1TXIF = 0;   //Zera a flag de interrupcao de Tx
0x015C	0xA94085  	BCLR	IFS0bits, #10
;final.c,14 :: 		IEC0bits.U1TXIE = 0;   //Desabilita a interrupcao de Tx
0x015E	0xA9408D  	BCLR	IEC0bits, #10
;final.c,15 :: 		IFS0bits.U1RXIF = 0;   //Zera a flag de de interrupcao de Rx
0x0160	0xA92085  	BCLR	IFS0bits, #9
;final.c,16 :: 		IEC0bits.U1RXIE = 0;   //Desabilita a flag de interrupcao de Rx
0x0162	0xA9208D  	BCLR	IEC0bits, #9
;final.c,17 :: 		U1MODEbits.UARTEN = 1; //Liga a UART
0x0164	0xA8E20D  	BSET	U1MODEbits, #15
;final.c,18 :: 		U1STAbits.UTXEN = 1;   //Come?a a comunica??o
0x0166	0xA8420F  	BSET	U1STAbits, #10
;final.c,19 :: 		}
L_end_Init_UART1:
0x0168	0x060000  	RETURN
; end of _Init_UART1
_Init_UART2:
;final.c,64 :: 		void Init_UART2(unsigned char valor_baud)
;final.c,66 :: 		U2BRG = valor_baud; //Configurar UART: 8bits de dados, 1 it de parada, sem paridade
0x01BA	0xFB800A  	ZE	W10, W0
0x01BC	0xB7A21E  	MOV	WREG, U2BRG
;final.c,67 :: 		U2MODE = 0x0000;    //ver tabela para saber as outras configura??es
0x01BE	0xEF2216  	CLR	U2MODE
;final.c,68 :: 		U2STA = 0x0000;
0x01C0	0xEF2218  	CLR	U2STA
;final.c,69 :: 		IFS1bits.U2TXIF = 0;   //Zera a flag de interrupcao de Tx
0x01C2	0xA92087  	BCLR	IFS1bits, #9
;final.c,70 :: 		IEC1bits.U2TXIE = 0;   //Desabilita a interrupcao de Tx
0x01C4	0xA9208F  	BCLR	IEC1bits, #9
;final.c,71 :: 		IFS1bits.U2RXIF = 0;   //Zera a flag de de interrupcao de Rx
0x01C6	0xA90087  	BCLR	IFS1bits, #8
;final.c,72 :: 		IEC1bits.U2RXIE = 0;   //Desabilita a flag de interrupcao de Rx
0x01C8	0xA9008F  	BCLR	IEC1bits, #8
;final.c,73 :: 		U2MODEbits.UARTEN = 1; //Liga a UART
0x01CA	0xA8E217  	BSET	U2MODEbits, #15
;final.c,74 :: 		U2STAbits.UTXEN = 1;   //Come?a a comunica??o
0x01CC	0xA84219  	BSET	U2STAbits, #10
;final.c,75 :: 		}
L_end_Init_UART2:
0x01CE	0x060000  	RETURN
; end of _Init_UART2
_receive_str2:
;final.c,107 :: 		void receive_str2(){
;final.c,108 :: 		int i = 0;
; i start address is: 6 (W3)
; i start address is: 6 (W3)
0x0182	0xEF2006  	CLR	W3
; i end address is: 6 (W3)
;final.c,111 :: 		do{
0x0184	0x370000  	BRA	L_receive_str215
L__receive_str225:
;final.c,115 :: 		}while(c != 0x0A);
;final.c,111 :: 		do{
L_receive_str215:
;final.c,112 :: 		c = receive_char2();
; i start address is: 6 (W3)
0x0186	0x07FFC2  	RCALL	_receive_char2
; c start address is: 4 (W2)
0x0188	0x784100  	MOV.B	W0, W2
;final.c,113 :: 		str2[i] = c;
0x018A	0x208001  	MOV	#lo_addr(_str2), W1
0x018C	0x408083  	ADD	W1, W3, W1
0x018E	0x784880  	MOV.B	W0, [W1]
;final.c,114 :: 		i++;
0x0190	0xEC2006  	INC	W3
; i end address is: 6 (W3)
;final.c,115 :: 		}while(c != 0x0A);
0x0192	0xE1146A  	CP.B	W2, #10
0x0194	0x3AFFF8  	BRA NZ	L__receive_str225
L__receive_str241:
; c end address is: 4 (W2)
; i end address is: 6 (W3)
;final.c,116 :: 		str2[i-1] = '\0';
; i start address is: 6 (W3)
0x0196	0x5180E1  	SUB	W3, #1, W1
; i end address is: 6 (W3)
0x0198	0x208000  	MOV	#lo_addr(_str2), W0
0x019A	0x400081  	ADD	W0, W1, W1
0x019C	0xEF2000  	CLR	W0
0x019E	0x784880  	MOV.B	W0, [W1]
;final.c,117 :: 		}
L_end_receive_str2:
0x01A0	0x060000  	RETURN
; end of _receive_str2
_receive_char2:
;final.c,99 :: 		char receive_char2(){
;final.c,101 :: 		while(!U2STAbits.URXDA);
L_receive_char213:
0x010C	0xAF0218  	BTSC	U2STAbits, #0
0x010E	0x370001  	BRA	L_receive_char214
0x0110	0x37FFFD  	BRA	L_receive_char213
L_receive_char214:
;final.c,102 :: 		c = U2RXREG; // escreve caractere
; c start address is: 2 (W1)
0x0112	0x8010E1  	MOV	U2RXREG, W1
;final.c,103 :: 		return c;
0x0114	0x784001  	MOV.B	W1, W0
; c end address is: 2 (W1)
;final.c,104 :: 		}
L_end_receive_char2:
0x0116	0x060000  	RETURN
; end of _receive_char2
_send_str1:
;final.c,35 :: 		void send_str1(unsigned char *str)
;final.c,37 :: 		unsigned int i = 0;
; i start address is: 2 (W1)
0x01A2	0xEF2002  	CLR	W1
; i end address is: 2 (W1)
;final.c,38 :: 		while (str[i])
L_send_str12:
; i start address is: 2 (W1)
0x01A4	0x450001  	ADD	W10, W1, W0
0x01A6	0xE00410  	CP0.B	[W0]
0x01A8	0x320007  	BRA Z	L_send_str13
L__send_str130:
;final.c,39 :: 		send_char1(str[i++]);
0x01AA	0x450001  	ADD	W10, W1, W0
0x01AC	0x781F8A  	PUSH	W10
0x01AE	0x784510  	MOV.B	[W0], W10
0x01B0	0x07FFA7  	RCALL	_send_char1
0x01B2	0x78054F  	POP	W10
0x01B4	0xEC2002  	INC	W1
; i end address is: 2 (W1)
0x01B6	0x37FFF6  	BRA	L_send_str12
L_send_str13:
;final.c,40 :: 		}
L_end_send_str1:
0x01B8	0x060000  	RETURN
; end of _send_str1
_send_char1:
;final.c,28 :: 		void send_char1(unsigned char c)
;final.c,30 :: 		while (U1STAbits.UTXBF);
L_send_char10:
0x0100	0xAE220F  	BTSS	U1STAbits, #9
0x0102	0x370001  	BRA	L_send_char11
0x0104	0x37FFFD  	BRA	L_send_char10
L_send_char11:
;final.c,31 :: 		U1TXREG = c; // escreve caractere
0x0106	0xFB800A  	ZE	W10, W0
0x0108	0xB7A210  	MOV	WREG, U1TXREG
;final.c,32 :: 		}
L_end_send_char1:
0x010A	0x060000  	RETURN
; end of _send_char1
_receive_str1:
;final.c,51 :: 		void receive_str1(){
;final.c,52 :: 		int i = 0;
; i start address is: 6 (W3)
; i start address is: 6 (W3)
0x0130	0xEF2006  	CLR	W3
; i end address is: 6 (W3)
;final.c,54 :: 		do{
0x0132	0x370000  	BRA	L_receive_str16
L__receive_str124:
;final.c,58 :: 		}while(c != 0x69);
;final.c,54 :: 		do{
L_receive_str16:
;final.c,55 :: 		c = receive_char1();
; i start address is: 6 (W3)
0x0134	0x07FFF7  	RCALL	_receive_char1
; c start address is: 4 (W2)
0x0136	0x784100  	MOV.B	W0, W2
;final.c,56 :: 		str1[i] = c;
0x0138	0x208641  	MOV	#lo_addr(_str1), W1
0x013A	0x408083  	ADD	W1, W3, W1
0x013C	0x784880  	MOV.B	W0, [W1]
;final.c,57 :: 		i++;
0x013E	0xEC2006  	INC	W3
; i end address is: 6 (W3)
;final.c,58 :: 		}while(c != 0x69);
0x0140	0xB3C690  	MOV.B	#105, W0
0x0142	0xE11400  	CP.B	W2, W0
0x0144	0x3AFFF7  	BRA NZ	L__receive_str124
L__receive_str133:
; c end address is: 4 (W2)
; i end address is: 6 (W3)
;final.c,59 :: 		str1[i-1] = '\0';
; i start address is: 6 (W3)
0x0146	0x5180E1  	SUB	W3, #1, W1
; i end address is: 6 (W3)
0x0148	0x208640  	MOV	#lo_addr(_str1), W0
0x014A	0x400081  	ADD	W0, W1, W1
0x014C	0xEF2000  	CLR	W0
0x014E	0x784880  	MOV.B	W0, [W1]
;final.c,60 :: 		}
L_end_receive_str1:
0x0150	0x060000  	RETURN
; end of _receive_str1
_receive_char1:
;final.c,43 :: 		char receive_char1(){
;final.c,45 :: 		while(!U1STAbits.URXDA);
L_receive_char14:
0x0124	0xAF020E  	BTSC	U1STAbits, #0
0x0126	0x370001  	BRA	L_receive_char15
0x0128	0x37FFFD  	BRA	L_receive_char14
L_receive_char15:
;final.c,46 :: 		c = U1RXREG; // escreve caractere
; c start address is: 2 (W1)
0x012A	0x801091  	MOV	U1RXREG, W1
;final.c,47 :: 		return c;
0x012C	0x784001  	MOV.B	W1, W0
; c end address is: 2 (W1)
;final.c,48 :: 		}
L_end_receive_char1:
0x012E	0x060000  	RETURN
; end of _receive_char1
_send_str2:
;final.c,91 :: 		void send_str2(unsigned char *str)
;final.c,93 :: 		unsigned int i = 0;
; i start address is: 2 (W1)
0x016A	0xEF2002  	CLR	W1
; i end address is: 2 (W1)
;final.c,94 :: 		while (str[i])
L_send_str211:
; i start address is: 2 (W1)
0x016C	0x450001  	ADD	W10, W1, W0
0x016E	0xE00410  	CP0.B	[W0]
0x0170	0x320007  	BRA Z	L_send_str212
L__send_str238:
;final.c,95 :: 		send_char2(str[i++]);
0x0172	0x450001  	ADD	W10, W1, W0
0x0174	0x781F8A  	PUSH	W10
0x0176	0x784510  	MOV.B	[W0], W10
0x0178	0x07FFCF  	RCALL	_send_char2
0x017A	0x78054F  	POP	W10
0x017C	0xEC2002  	INC	W1
; i end address is: 2 (W1)
0x017E	0x37FFF6  	BRA	L_send_str211
L_send_str212:
;final.c,96 :: 		}
L_end_send_str2:
0x0180	0x060000  	RETURN
; end of _send_str2
_send_char2:
;final.c,84 :: 		void send_char2(unsigned char c)
;final.c,86 :: 		while (U2STAbits.UTXBF);
L_send_char29:
0x0118	0xAE2219  	BTSS	U2STAbits, #9
0x011A	0x370001  	BRA	L_send_char210
0x011C	0x37FFFD  	BRA	L_send_char29
L_send_char210:
;final.c,87 :: 		U2TXREG = c; // escreve caractere
0x011E	0xFB800A  	ZE	W10, W0
0x0120	0xB7A21A  	MOV	WREG, U2TXREG
;final.c,88 :: 		}
L_end_send_char2:
0x0122	0x060000  	RETURN
; end of _send_char2
0x0274	0x20800A  	MOV	#2048, W10
0x0276	0x20000B  	MOV	#0, W11
0x0278	0x090063  	REPEAT	#99
0x027A	0x781D0B  	MOV	W11, [W10++]
0x027C	0x060000  	RETURN
_Tx_serial2:
0x0258	0xF80034  	PUSH	PSVPAG
0x025A	0xF80036  	PUSH	RCOUNT
0x025C	0x781F80  	PUSH	W0
0x025E	0x200020  	MOV	#2, W0
0x0260	0x09000C  	REPEAT	#12
0x0262	0x781FB0  	PUSH	[W0++]
;final.c,78 :: 		void Tx_serial2() iv IVT_ADDR_U2TXINTERRUPT
;final.c,80 :: 		IFS1bits.U2TXIF = 0;
0x0264	0xA92087  	BCLR	IFS1bits, #9
;final.c,81 :: 		}
L_end_Tx_serial2:
0x0266	0x2001A0  	MOV	#26, W0
0x0268	0x09000C  	REPEAT	#12
0x026A	0x78104F  	POP	[W0--]
0x026C	0x78004F  	POP	W0
0x026E	0xF90036  	POP	RCOUNT
0x0270	0xF90034  	POP	PSVPAG
0x0272	0x064000  	RETFIE
; end of _Tx_serial2
_Tx_serial1:
0x01D0	0xF80034  	PUSH	PSVPAG
0x01D2	0xF80036  	PUSH	RCOUNT
0x01D4	0x781F80  	PUSH	W0
0x01D6	0x200020  	MOV	#2, W0
0x01D8	0x09000C  	REPEAT	#12
0x01DA	0x781FB0  	PUSH	[W0++]
;final.c,22 :: 		void Tx_serial1() iv IVT_ADDR_U1TXINTERRUPT
;final.c,24 :: 		IFS0bits.U1TXIF = 0;
0x01DC	0xA94085  	BCLR	IFS0bits, #10
;final.c,25 :: 		}
L_end_Tx_serial1:
0x01DE	0x2001A0  	MOV	#26, W0
0x01E0	0x09000C  	REPEAT	#12
0x01E2	0x78104F  	POP	[W0--]
0x01E4	0x78004F  	POP	W0
0x01E6	0xF90036  	POP	RCOUNT
0x01E8	0xF90034  	POP	PSVPAG
0x01EA	0x064000  	RETFIE
; end of _Tx_serial1
_criatividade:
0x01EC	0xF80034  	PUSH	PSVPAG
0x01EE	0xF80036  	PUSH	RCOUNT
0x01F0	0x781F80  	PUSH	W0
0x01F2	0x200020  	MOV	#2, W0
0x01F4	0x09000C  	REPEAT	#12
0x01F6	0x781FB0  	PUSH	[W0++]
;final.c,121 :: 		void criatividade() iv IVT_ADDR_INT0INTERRUPT ics ICS_AUTO
;final.c,123 :: 		IFS0bits.INT0IF = 0;
0x01F8	0xA90084  	BCLR.B	IFS0bits, #0
;final.c,124 :: 		}
L_end_criatividade:
0x01FA	0x2001A0  	MOV	#26, W0
0x01FC	0x09000C  	REPEAT	#12
0x01FE	0x78104F  	POP	[W0--]
0x0200	0x78004F  	POP	W0
0x0202	0xF90036  	POP	RCOUNT
0x0204	0xF90034  	POP	PSVPAG
0x0206	0x064000  	RETFIE
; end of _criatividade
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0100      [12]    _send_char1
0x010C      [12]    _receive_char2
0x0118      [12]    _send_char2
0x0124      [12]    _receive_char1
0x0130      [34]    _receive_str1
0x0152      [24]    _Init_UART1
0x016A      [24]    _send_str2
0x0182      [32]    _receive_str2
0x01A2      [24]    _send_str1
0x01BA      [22]    _Init_UART2
0x01D0      [28]    _Tx_serial1
0x01EC      [28]    _criatividade
0x0208      [80]    _main
0x0258      [28]    _Tx_serial2
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0800     [100]    _str2
0x021E       [2]    U2BRG
0x02C6       [2]    TRISB
0x008C       [2]    IEC0bits
0x02A8       [2]    ADPCFG
0x0216       [2]    U2MODE
0x0216       [2]    U2MODEbits
0x021C       [2]    U2RXREG
0x008E       [2]    IEC1bits
0x0218       [2]    U2STA
0x0086       [2]    IFS1bits
0x0212       [2]    U1RXREG
0x0218       [2]    U2STAbits
0x0210       [2]    U1TXREG
0x0864     [100]    _str1
0x020E       [2]    U1STAbits
0x021A       [2]    U2TXREG
0x020E       [2]    U1STA
0x0084       [2]    IFS0bits
0x020C       [2]    U1MODEbits
0x0214       [2]    U1BRG
0x020C       [2]    U1MODE
0x0014       [1]    FARG_send_char1_c
0x0014       [1]    FARG_send_char2_c
0x0014       [1]    FARG_Init_UART1_valor_baud
0x0014       [2]    FARG_send_str2_str
0x0014       [2]    FARG_send_str1_str
0x0014       [1]    FARG_Init_UART2_valor_baud
0x020C       [2]    U1MODE
0x020E       [2]    U1STA
0x0210       [2]    U1TXREG
0x0212       [2]    U1RXREG
0x0214       [2]    U1BRG
0x0216       [2]    U2MODE
0x0218       [2]    U2STA
0x021A       [2]    U2TXREG
0x021C       [2]    U2RXREG
0x021E       [2]    U2BRG
0x02A8       [2]    ADPCFG
0x02C6       [2]    TRISB
