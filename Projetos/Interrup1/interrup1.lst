;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 02/12/2019 07:54:18
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x00000004013A  	GOTO	_main
0x0004	0x000000  	0
0x0006	0x000000  	0
0x0008	0x000000  	0
0x000A	0x000000  	0
0x000C	0x000000  	0
0x000E	0x000000  	0
0x0010	0x000000  	0
0x0012	0x000000  	0
0x0014	0x000100  	256
0x0016	0x000000  	0
0x0018	0x000000  	0
0x001A	0x000000  	0
0x001C	0x000000  	0
0x001E	0x000000  	0
0x0020	0x000000  	0
0x0022	0x000000  	0
0x0024	0x000000  	0
0x0026	0x000000  	0
0x0028	0x000000  	0
0x002A	0x000000  	0
0x002C	0x000000  	0
0x002E	0x000000  	0
0x0030	0x000000  	0
0x0032	0x000000  	0
0x0034	0x000000  	0
0x0036	0x000000  	0
0x0038	0x000000  	0
0x003A	0x000000  	0
0x003C	0x000000  	0
0x003E	0x000000  	0
0x0040	0x000000  	0
0x0042	0x000000  	0
0x0044	0x000000  	0
0x0046	0x000000  	0
0x0048	0x000000  	0
0x004A	0x000000  	0
0x004C	0x000000  	0
0x004E	0x000000  	0
0x0050	0x000000  	0
0x0052	0x000000  	0
0x0054	0x000000  	0
0x0056	0x000000  	0
0x0058	0x000000  	0
0x005A	0x000000  	0
0x005C	0x000000  	0
0x005E	0x000000  	0
0x0060	0x000000  	0
0x0062	0x000000  	0
0x0064	0x000000  	0
0x0066	0x000000  	0
0x0068	0x000000  	0
0x006A	0x000000  	0
0x006C	0x000000  	0
0x006E	0x000000  	0
0x0070	0x000000  	0
0x0072	0x000000  	0
0x0074	0x000000  	0
0x0076	0x000000  	0
0x0078	0x000000  	0
0x007A	0x000000  	0
0x007C	0x000000  	0
0x007E	0x000000  	0
0x0080	0x000000  	0
0x0082	0x000000  	0
0x0084	0x000000  	0
0x0086	0x000000  	0
0x0088	0x000000  	0
0x008A	0x000000  	0
0x008C	0x000000  	0
0x008E	0x000000  	0
0x0090	0x000000  	0
0x0092	0x000000  	0
0x0094	0x000000  	0
0x0096	0x000000  	0
0x0098	0x000000  	0
0x009A	0x000000  	0
0x009C	0x000000  	0
0x009E	0x000000  	0
0x00A0	0x000000  	0
0x00A2	0x000000  	0
0x00A4	0x000000  	0
0x00A6	0x000000  	0
0x00A8	0x000000  	0
0x00AA	0x000000  	0
0x00AC	0x000000  	0
0x00AE	0x000000  	0
0x00B0	0x000000  	0
0x00B2	0x000000  	0
0x00B4	0x000000  	0
0x00B6	0x000000  	0
0x00B8	0x000000  	0
0x00BA	0x000000  	0
0x00BC	0x000000  	0
0x00BE	0x000000  	0
0x00C0	0x000000  	0
0x00C2	0x000000  	0
0x00C4	0x000000  	0
0x00C6	0x000000  	0
0x00C8	0x000000  	0
0x00CA	0x000000  	0
0x00CC	0x000000  	0
0x00CE	0x000000  	0
0x00D0	0x000000  	0
0x00D2	0x000000  	0
0x00D4	0x000000  	0
0x00D6	0x000000  	0
0x00D8	0x000000  	0
0x00DA	0x000000  	0
0x00DC	0x000000  	0
0x00DE	0x000000  	0
0x00E0	0x000000  	0
0x00E2	0x000000  	0
0x00E4	0x000000  	0
0x00E6	0x000000  	0
0x00E8	0x000000  	0
0x00EA	0x000000  	0
0x00EC	0x000000  	0
0x00EE	0x000000  	0
0x00F0	0x000000  	0
0x00F2	0x000000  	0
0x00F4	0x000000  	0
0x00F6	0x000000  	0
0x00F8	0x000000  	0
0x00FA	0x000000  	0
0x00FC	0x000000  	0
0x00FE	0x000000  	0
_main:
0x013A	0x20802F  	MOV	#2050, W15
0x013C	0x20FFF0  	MOV	#4095, W0
0x013E	0xB7A020  	MOV	WREG, SPLIM
0x0140	0x200000  	MOV	#0, W0
0x0142	0xB7A034  	MOV	WREG, PSVPAG
0x0144	0x200040  	MOV	#4, W0
0x0146	0xB72044  	IOR	CORCON
0x0148	0x000000020190  	CALL	400
0x014C	0x00000002019A  	CALL	410
;interrup1.c,22 :: 		void main () {
;interrup1.c,24 :: 		ADPCFG = 0xFFFF; // porta B digital
0x0150	0x2FFFF0  	MOV	#65535, W0
0x0152	0xB7A2A8  	MOV	WREG, ADPCFG
;interrup1.c,26 :: 		TRISB = 0; // porta B de saída
0x0154	0xEF22C6  	CLR	TRISB
;interrup1.c,27 :: 		LATB = 0; // inicialização
0x0156	0xEF22CA  	CLR	LATB
;interrup1.c,29 :: 		TRISE = 0x0100; // porta A com pino 8 de entrada (INT0 = RE4)
0x0158	0x201000  	MOV	#256, W0
0x015A	0xB7A2D8  	MOV	WREG, TRISE
;interrup1.c,33 :: 		IFS0 = 0; // inicialização do registrador de interrupção IFS0 --> desabilitação de flag
0x015C	0xEF2084  	CLR	IFS0
;interrup1.c,35 :: 		IEC0bits.INT0IE = 1; // habilitação de INT0
0x015E	0xA8008C  	BSET.B	IEC0bits, #0
;interrup1.c,37 :: 		INTCON2.INT0EP = 0; // configuração de borda de subida;
0x0160	0xA90082  	BCLR.B	INTCON2, #0
;interrup1.c,41 :: 		while(1){
L_main4:
;interrup1.c,42 :: 		if (flag != 0){ // se não estiver no estado 0
0x0162	0x804000  	MOV	_flag, W0
0x0164	0xE10060  	CP	W0, #0
0x0166	0x320011  	BRA Z	L_main6
L__main14:
;interrup1.c,44 :: 		LATB = 0xFF;
0x0168	0x200FF0  	MOV	#255, W0
0x016A	0xB7A2CA  	MOV	WREG, LATB
;interrup1.c,45 :: 		Delay_ms(1000);
0x016C	0x200528  	MOV	#82, W8
0x016E	0x2616F7  	MOV	#24943, W7
L_main7:
0x0170	0xED200E  	DEC	W7
0x0172	0x3AFFFE  	BRA NZ	L_main7
0x0174	0xED2010  	DEC	W8
0x0176	0x3AFFFC  	BRA NZ	L_main7
0x0178	0x000000  	NOP
;interrup1.c,46 :: 		LATB = 0;
0x017A	0xEF22CA  	CLR	LATB
;interrup1.c,47 :: 		Delay_ms(1000);
0x017C	0x200528  	MOV	#82, W8
0x017E	0x2616F7  	MOV	#24943, W7
L_main9:
0x0180	0xED200E  	DEC	W7
0x0182	0x3AFFFE  	BRA NZ	L_main9
0x0184	0xED2010  	DEC	W8
0x0186	0x3AFFFC  	BRA NZ	L_main9
0x0188	0x000000  	NOP
;interrup1.c,48 :: 		}
L_main6:
;interrup1.c,49 :: 		}
0x018A	0x37FFEB  	BRA	L_main4
;interrup1.c,50 :: 		}
L_end_main:
L__main_end_loop:
0x018C	0x37FFFF  	BRA	L__main_end_loop
; end of _main
0x0190	0x20800A  	MOV	#2048, W10
0x0192	0x20000B  	MOV	#0, W11
0x0194	0x090000  	REPEAT	#0
0x0196	0x781D0B  	MOV	W11, [W10++]
0x0198	0x060000  	RETURN
0x019A	0x208001  	MOV	#lo_addr(_flag), W1
0x019C	0x2818E0  	MOV	#33166, W0
0x019E	0x090000  	REPEAT	#0
0x01A0	0x7818B0  	MOV	[W0++], [W1++]
0x01A2	0x060000  	RETURN
_INT0Int:
0x0100	0xF80034  	PUSH	PSVPAG
0x0102	0xF80036  	PUSH	RCOUNT
0x0104	0x781F80  	PUSH	W0
0x0106	0x200020  	MOV	#2, W0
0x0108	0x09000C  	REPEAT	#12
0x010A	0x781FB0  	PUSH	[W0++]
;interrup1.c,5 :: 		void INT0Int() iv IVT_ADDR_INT0INTERRUPT { // declaração da interrupção
;interrup1.c,6 :: 		Delay_ms(100); // delay anti-bouncing
0x010C	0x200098  	MOV	#9, W8
0x010E	0x223577  	MOV	#9047, W7
L_INT0Int0:
0x0110	0xED200E  	DEC	W7
0x0112	0x3AFFFE  	BRA NZ	L_INT0Int0
0x0114	0xED2010  	DEC	W8
0x0116	0x3AFFFC  	BRA NZ	L_INT0Int0
;interrup1.c,8 :: 		if (flag == 0){ //estado 0 troca pra estado 1 (vai piscar o LED)
0x0118	0x804000  	MOV	_flag, W0
0x011A	0xE10060  	CP	W0, #0
0x011C	0x3A0003  	BRA NZ	L_INT0Int2
L__INT0Int12:
;interrup1.c,9 :: 		flag = 1;
0x011E	0x200010  	MOV	#1, W0
0x0120	0x884000  	MOV	W0, _flag
;interrup1.c,10 :: 		}
0x0122	0x370003  	BRA	L_INT0Int3
L_INT0Int2:
;interrup1.c,13 :: 		flag = 0;
0x0124	0xEF2000  	CLR	W0
0x0126	0x884000  	MOV	W0, _flag
;interrup1.c,14 :: 		LATB = 0;
0x0128	0xEF22CA  	CLR	LATB
;interrup1.c,15 :: 		}
L_INT0Int3:
;interrup1.c,17 :: 		IFS0bits.INT0IF = 0; // "zeramento" da interrupção após ser executada --> desabilitação de flag
0x012A	0xA90084  	BCLR.B	IFS0bits, #0
;interrup1.c,18 :: 		}
L_end_INT0Int:
0x012C	0x2001A0  	MOV	#26, W0
0x012E	0x09000C  	REPEAT	#12
0x0130	0x78104F  	POP	[W0--]
0x0132	0x78004F  	POP	W0
0x0134	0xF90036  	POP	RCOUNT
0x0136	0xF90034  	POP	PSVPAG
0x0138	0x064000  	RETFIE
; end of _INT0Int
;interrup1.c,0 :: ?ICS_flag [2]
0x018E	0x0000 ;?ICS_flag+0
; end of ?ICS_flag
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0100      [58]    _INT0Int
0x013A      [84]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0082       [2]    INTCON2
0x008C       [2]    IEC0bits
0x0084       [2]    IFS0bits
0x0084       [2]    IFS0
0x02C6       [2]    TRISB
0x02A8       [2]    ADPCFG
0x02D8       [2]    TRISE
0x02CA       [2]    LATB
0x0800       [2]    _flag
0x0082       [2]    INTCON2
0x0084       [2]    IFS0
0x02A8       [2]    ADPCFG
0x02C6       [2]    TRISB
0x02CA       [2]    LATB
0x02D8       [2]    TRISE
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x018E       [2]    ?ICS_flag
